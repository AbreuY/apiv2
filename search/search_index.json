{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started Working inside Docker (slower) Build BreatheCode Dev docker image Install docker desktop in your Windows, else find a guide to install Docker and Docker Compose in your linux distribution uname -a . # Check which dependencies you need install in your operating system python -m scripts.doctor # Generate the BreatheCode Dev docker image docker-compose build bc-dev Testing inside BreatheCode Dev # Open the BreatheCode Dev, this shell don't export the port 8000 docker-compose run bc-dev fish # Testing pipenv run test ./breathecode/activity # path # Testing in parallel pipenv run ptest ./breathecode/activity # path # Coverage pipenv run cov breathecode.activity # python module path # Coverage in parallel pipenv run pcov breathecode.activity # python module path Run BreatheCode API as docker service # open BreatheCode API as a service and export the port 8000 docker-compose up -d bc-dev # open the BreatheCode Dev, this shell don't export the port 8000 docker-compose run bc-dev fish # create super user pipenv run python manage.py createsuperuser # Close the BreatheCode Dev exit # See the output of Django docker-compose logs -f bc-dev # open localhost:8000 to view the api # open localhost:8000/admin to view the admin Working in your local machine (recomended) Installation in your local machine Install docker desktop in your Windows, else find a guide to install Docker and Docker Compose in your linux distribution uname -a . # Check which dependencies you need install in your operating system python -m scripts.doctor # Setting up the redis and postgres database, you also can install manually in your local machine this databases docker-compose up -d redis postgres # Install and setting up your development environment (this command replace your .env file) python -m scripts.install Testing in your local machine # Testing pipenv run test ./breathecode/activity # path # Testing in parallel pipenv run ptest ./breathecode/activity # path # Coverage pipenv run cov breathecode.activity # python module path # Coverage in parallel pipenv run pcov breathecode.activity # python module path Run BreatheCode API in your local machine # Collect statics pipenv run python manage.py collectstatic --noinput # Run migrations pipenv run python manage.py migrate # Load fixtures (populate the database) pipenv run python manage.py loaddata breathecode/*/fixtures/dev_*.json # Create super user pipenv run python manage.py createsuperuser # Run server pipenv run start # open localhost:8000 to view the api # open localhost:8000/admin to view the admin","title":"Getting started"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#working-inside-docker-slower","text":"","title":"Working inside Docker (slower)"},{"location":"#build-breathecode-dev-docker-image","text":"Install docker desktop in your Windows, else find a guide to install Docker and Docker Compose in your linux distribution uname -a . # Check which dependencies you need install in your operating system python -m scripts.doctor # Generate the BreatheCode Dev docker image docker-compose build bc-dev","title":"Build BreatheCode Dev docker image"},{"location":"#testing-inside-breathecode-dev","text":"# Open the BreatheCode Dev, this shell don't export the port 8000 docker-compose run bc-dev fish # Testing pipenv run test ./breathecode/activity # path # Testing in parallel pipenv run ptest ./breathecode/activity # path # Coverage pipenv run cov breathecode.activity # python module path # Coverage in parallel pipenv run pcov breathecode.activity # python module path","title":"Testing inside BreatheCode Dev"},{"location":"#run-breathecode-api-as-docker-service","text":"# open BreatheCode API as a service and export the port 8000 docker-compose up -d bc-dev # open the BreatheCode Dev, this shell don't export the port 8000 docker-compose run bc-dev fish # create super user pipenv run python manage.py createsuperuser # Close the BreatheCode Dev exit # See the output of Django docker-compose logs -f bc-dev # open localhost:8000 to view the api # open localhost:8000/admin to view the admin","title":"Run BreatheCode API as docker service"},{"location":"#working-in-your-local-machine-recomended","text":"","title":"Working in your local machine (recomended)"},{"location":"#installation-in-your-local-machine","text":"Install docker desktop in your Windows, else find a guide to install Docker and Docker Compose in your linux distribution uname -a . # Check which dependencies you need install in your operating system python -m scripts.doctor # Setting up the redis and postgres database, you also can install manually in your local machine this databases docker-compose up -d redis postgres # Install and setting up your development environment (this command replace your .env file) python -m scripts.install","title":"Installation in your local machine"},{"location":"#testing-in-your-local-machine","text":"# Testing pipenv run test ./breathecode/activity # path # Testing in parallel pipenv run ptest ./breathecode/activity # path # Coverage pipenv run cov breathecode.activity # python module path # Coverage in parallel pipenv run pcov breathecode.activity # python module path","title":"Testing in your local machine"},{"location":"#run-breathecode-api-in-your-local-machine","text":"# Collect statics pipenv run python manage.py collectstatic --noinput # Run migrations pipenv run python manage.py migrate # Load fixtures (populate the database) pipenv run python manage.py loaddata breathecode/*/fixtures/dev_*.json # Create super user pipenv run python manage.py createsuperuser # Run server pipenv run start # open localhost:8000 to view the api # open localhost:8000/admin to view the admin","title":"Run BreatheCode API in your local machine"},{"location":"endponts/","text":"Enpoints Documentation Postman OpenApi","title":"Enpoints Documentation"},{"location":"endponts/#enpoints-documentation","text":"Postman OpenApi","title":"Enpoints Documentation"},{"location":"apps/activities/","text":"Activity API This API uses Google DataStore as storage, there is not local storage on Heroku or Postgres. We need Google DataStore because we plan to store hugh amounts of activities that the user can do inside breathecode. Possible activities (so far): \"breathecode_login\" //every time it logs in \"online_platform_registration\" //first day using breathecode \"public_event_attendance\" //attendy on an eventbrite event \"classroom_attendance\" //when the student attent to class \"classroom_unattendance\" //when the student miss class \"lesson_opened\" //when a lessons is opened on the platform \"office_attendance\" //when the office raspberry pi detects the student \"nps_survey_answered\" //when a nps survey is answered by the student \"exercise_success\" //when student successfully tests exercise Any activity has the following inputs: 'cohort', 'data', 'day', 'slug', 'user_agent', Endpoints for the user Get recent user activity GET: activity/user/{email_or_id}?slug=activity_slug Add a new user activity (requires authentication) POST: activity/user/{email_or_id} { 'slug' => 'activity_slug', 'data' => 'any aditional data (string or json-encoded-string)' } \ud83d\udca1 Node: You can pass the cohort in the data json object and it will be possible to filter on the activity graph like this: { 'slug' => 'activity_slug', 'data' => \"{ \\\"cohort\\\": \\\"mdc-iii\\\" }\" (json encoded string with the cohort id) } Endpoints for the Cohort Get recent user activity GET: activity/cohort/{slug_or_id}?slug=activity_slug Endpoints for the coding_error's Get recent user coding_errors GET: activity/coding_error/{email_or_id}?slug=activity_slug Add a new coding_error (requires authentication) POST: activity/coding_error/ { \"user_id\" => \"my@email.com\", \"slug\" => \"webpack_error\", \"data\" => \"optional additional information about the error\", \"message\" => \"file not found\", \"name\" => \"module-not-found, \"severity\" => \"900\", \"details\" => \"stack trace for the error as string\" }","title":"Activities"},{"location":"apps/activities/#activity-api","text":"This API uses Google DataStore as storage, there is not local storage on Heroku or Postgres. We need Google DataStore because we plan to store hugh amounts of activities that the user can do inside breathecode. Possible activities (so far): \"breathecode_login\" //every time it logs in \"online_platform_registration\" //first day using breathecode \"public_event_attendance\" //attendy on an eventbrite event \"classroom_attendance\" //when the student attent to class \"classroom_unattendance\" //when the student miss class \"lesson_opened\" //when a lessons is opened on the platform \"office_attendance\" //when the office raspberry pi detects the student \"nps_survey_answered\" //when a nps survey is answered by the student \"exercise_success\" //when student successfully tests exercise Any activity has the following inputs: 'cohort', 'data', 'day', 'slug', 'user_agent',","title":"Activity API"},{"location":"apps/activities/#endpoints-for-the-user","text":"Get recent user activity GET: activity/user/{email_or_id}?slug=activity_slug Add a new user activity (requires authentication) POST: activity/user/{email_or_id} { 'slug' => 'activity_slug', 'data' => 'any aditional data (string or json-encoded-string)' } \ud83d\udca1 Node: You can pass the cohort in the data json object and it will be possible to filter on the activity graph like this: { 'slug' => 'activity_slug', 'data' => \"{ \\\"cohort\\\": \\\"mdc-iii\\\" }\" (json encoded string with the cohort id) } Endpoints for the Cohort Get recent user activity GET: activity/cohort/{slug_or_id}?slug=activity_slug Endpoints for the coding_error's Get recent user coding_errors GET: activity/coding_error/{email_or_id}?slug=activity_slug Add a new coding_error (requires authentication) POST: activity/coding_error/ { \"user_id\" => \"my@email.com\", \"slug\" => \"webpack_error\", \"data\" => \"optional additional information about the error\", \"message\" => \"file not found\", \"name\" => \"module-not-found, \"severity\" => \"900\", \"details\" => \"stack trace for the error as string\" }","title":"Endpoints for the user"},{"location":"apps/admissions/","text":"BreatheCode.Admissions This module take care of the academic side of breathecode: Students, Cohorts, Course (aka: Certificate), Syllabus, etc. These are some of the things you can do with the breathecode.admissions API: Manage Academies (BreatheCode let's you divide the academic operations into several academies normally based on territory, for example: 4Geeks Academy Miami vs 4Geeks Academy Madrid). Manage Academy Staff: There are multiple roles surroing an academy, here you can invite users to one or many academies and assign them roles based on their responsabilities. Manage Students (invite and delete students). Manage Cohorts: Every new batch of students that starts in a classroom with a start and end date is called a \"Cohort\". TODO: finish this documentation. Commands Sync academies python manage.py sync_admissions academies Override previous academies python manage.py sync_admissions academies --override Sync courses python manage.py sync_admissions certificates Sync cohorts python manage.py sync_admissions cohorts Sync students python manage.py sync_admissions students --limit=3 Limit: the number of students to sync","title":"BreatheCode.Admissions"},{"location":"apps/admissions/#breathecodeadmissions","text":"This module take care of the academic side of breathecode: Students, Cohorts, Course (aka: Certificate), Syllabus, etc. These are some of the things you can do with the breathecode.admissions API: Manage Academies (BreatheCode let's you divide the academic operations into several academies normally based on territory, for example: 4Geeks Academy Miami vs 4Geeks Academy Madrid). Manage Academy Staff: There are multiple roles surroing an academy, here you can invite users to one or many academies and assign them roles based on their responsabilities. Manage Students (invite and delete students). Manage Cohorts: Every new batch of students that starts in a classroom with a start and end date is called a \"Cohort\". TODO: finish this documentation.","title":"BreatheCode.Admissions"},{"location":"apps/admissions/#commands","text":"","title":"Commands"},{"location":"apps/admissions/#sync-academies","text":"python manage.py sync_admissions academies Override previous academies python manage.py sync_admissions academies --override","title":"Sync academies"},{"location":"apps/admissions/#sync-courses","text":"python manage.py sync_admissions certificates","title":"Sync courses"},{"location":"apps/admissions/#sync-cohorts","text":"python manage.py sync_admissions cohorts","title":"Sync cohorts"},{"location":"apps/admissions/#sync-students","text":"python manage.py sync_admissions students --limit=3 Limit: the number of students to sync","title":"Sync students"},{"location":"apps/monitoring/introduction/","text":"Intro to monitoring This app is ideal for running diagnostic and reminders on the breathecode platform. Installation Setup the monitor app job for once a day, this is the command: $ python manage.py monitor apps Setup the monitor script job for once a day, this is the command: $ python manage.py monitor script","title":"Intro to monitoring"},{"location":"apps/monitoring/introduction/#intro-to-monitoring","text":"This app is ideal for running diagnostic and reminders on the breathecode platform.","title":"Intro to monitoring"},{"location":"apps/monitoring/introduction/#installation","text":"Setup the monitor app job for once a day, this is the command: $ python manage.py monitor apps Setup the monitor script job for once a day, this is the command: $ python manage.py monitor script","title":"Installation"},{"location":"apps/monitoring/scripts/","text":"Monitoring Scripts A monitoring script is something that you want to execute recurrently withing the breathecode API, for example: scripts/alert_pending_leads.py is a small python script that checks if there is FormEntry Marketing module database that are pending processing. You can create a monitoring script to remind academy staff members about things, or to remind students about pending homework, etc. Stepts to create a new script: create a new python file inside ./breathecode/monitoring/scripts make sure your script starts with this content always: #!/usr/bin/env python \"\"\" Alert when there are Form Entries with status = PENDING \"\"\" from breathecode.utils import ScriptNotification # start your code here You have access to the entire breathecode API from here, you can import models, services or any other class or variable from any file. You can raise a ScriptNotification to notify for MINOR or CRITICAL reasons, for example: # here we are raising a notification because there are 2 pending tasks raise ScriptNotification ( \"There are 2 pending taks\" , status = 'MINOR' , slug = \"pending_tasks\" ) 5. If you don't raise any ScriptNotification and there are no other Exceptions in the script, it will be considered successfull and no notifications will trigger. 6. When a ScriptNotification has been raise the Application owner will receive a notification to the application.email and slack channel configured for notifications. 7. Check for other scripts as examples. 8. Test your script. Global Context There are some global variables that you have available during your scripts: Variable name Value academy Contains the academy model object, you can use it to retrieve the current academy id like this: query.filter(academy__id=academy.id) Manually running your script You can test your scripts by running the following command: $ python manage.py run_script <file_name> # For example you can test the alert_pending_leads script like this: $ python manage.py run_script alert_pending_leads.py Example Script The following script checks for pending leads to process: #!/usr/bin/env python \"\"\" Alert when there are Form Entries with status = PENDING \"\"\" from breathecode.marketing.models import FormEntry from django.db.models import Q from breathecode.utils import ScriptNotification # check the database for pending leads pending_leads = FormEntry . objects . filter ( storage_status = \"PENDING\" ) . filter ( Q ( academy__id = academy . id ) | Q ( location = academy . slug )) # trigger notification because pending leads were found if len ( pending_leads ) > 0 : raise ScriptNotification ( f \"Warning there are { len ( pending_leads ) } pending form entries\" , status = 'MINOR' ) # You can print this and it will show on the script results print ( \"No pending leads\" ) Unit testing your script from breathecode.monitoring.actions import run_script script = run_script ( model . monitor_script ) del script [ 'slack_payload' ] del script [ 'title' ] expected = { 'details' : script [ 'details' ], 'severity_level' : 5 , 'status' : script [ 'status' ], 'text' : script [ 'text' ] } self . assertEqual ( script , expected ) self . assertEqual ( self . all_monitor_script_dict (), [{ ** self . model_to_dict ( model , 'monitor_script' ), }])","title":"Monitoring Scripts"},{"location":"apps/monitoring/scripts/#monitoring-scripts","text":"A monitoring script is something that you want to execute recurrently withing the breathecode API, for example: scripts/alert_pending_leads.py is a small python script that checks if there is FormEntry Marketing module database that are pending processing. You can create a monitoring script to remind academy staff members about things, or to remind students about pending homework, etc.","title":"Monitoring Scripts"},{"location":"apps/monitoring/scripts/#stepts-to-create-a-new-script","text":"create a new python file inside ./breathecode/monitoring/scripts make sure your script starts with this content always: #!/usr/bin/env python \"\"\" Alert when there are Form Entries with status = PENDING \"\"\" from breathecode.utils import ScriptNotification # start your code here You have access to the entire breathecode API from here, you can import models, services or any other class or variable from any file. You can raise a ScriptNotification to notify for MINOR or CRITICAL reasons, for example: # here we are raising a notification because there are 2 pending tasks raise ScriptNotification ( \"There are 2 pending taks\" , status = 'MINOR' , slug = \"pending_tasks\" ) 5. If you don't raise any ScriptNotification and there are no other Exceptions in the script, it will be considered successfull and no notifications will trigger. 6. When a ScriptNotification has been raise the Application owner will receive a notification to the application.email and slack channel configured for notifications. 7. Check for other scripts as examples. 8. Test your script.","title":"Stepts to create a new script:"},{"location":"apps/monitoring/scripts/#global-context","text":"There are some global variables that you have available during your scripts: Variable name Value academy Contains the academy model object, you can use it to retrieve the current academy id like this: query.filter(academy__id=academy.id)","title":"Global Context"},{"location":"apps/monitoring/scripts/#manually-running-your-script","text":"You can test your scripts by running the following command: $ python manage.py run_script <file_name> # For example you can test the alert_pending_leads script like this: $ python manage.py run_script alert_pending_leads.py","title":"Manually running your script"},{"location":"apps/monitoring/scripts/#example-script","text":"The following script checks for pending leads to process: #!/usr/bin/env python \"\"\" Alert when there are Form Entries with status = PENDING \"\"\" from breathecode.marketing.models import FormEntry from django.db.models import Q from breathecode.utils import ScriptNotification # check the database for pending leads pending_leads = FormEntry . objects . filter ( storage_status = \"PENDING\" ) . filter ( Q ( academy__id = academy . id ) | Q ( location = academy . slug )) # trigger notification because pending leads were found if len ( pending_leads ) > 0 : raise ScriptNotification ( f \"Warning there are { len ( pending_leads ) } pending form entries\" , status = 'MINOR' ) # You can print this and it will show on the script results print ( \"No pending leads\" )","title":"Example Script"},{"location":"apps/monitoring/scripts/#unit-testing-your-script","text":"from breathecode.monitoring.actions import run_script script = run_script ( model . monitor_script ) del script [ 'slack_payload' ] del script [ 'title' ] expected = { 'details' : script [ 'details' ], 'severity_level' : 5 , 'status' : script [ 'status' ], 'text' : script [ 'text' ] } self . assertEqual ( script , expected ) self . assertEqual ( self . all_monitor_script_dict (), [{ ** self . model_to_dict ( model , 'monitor_script' ), }])","title":"Unit testing your script"},{"location":"installation/configuring-the-github-secrets/","text":"Configuring the Github secrets Get Dockerhub token Add the repo to Coveralls https://coveralls.io/repos/new Add the repo to Codecov https://app.codecov.io/gh/+ Set up the secrets","title":"Configuring the Github secrets"},{"location":"installation/configuring-the-github-secrets/#configuring-the-github-secrets","text":"Get Dockerhub token Add the repo to Coveralls https://coveralls.io/repos/new Add the repo to Codecov https://app.codecov.io/gh/+ Set up the secrets","title":"Configuring the Github secrets"},{"location":"installation/editor-configs/","text":"Enable formatter in Visual Studio Code Run python -m scripts.install .","title":"Enable formatter in Visual Studio Code"},{"location":"installation/editor-configs/#enable-formatter-in-visual-studio-code","text":"Run python -m scripts.install .","title":"Enable formatter in Visual Studio Code"},{"location":"installation/fixtures/","text":"Fixtures Fixtures are fake data ideal for development. Saving new fixtures python manage.py dumpdata auth > ./breathecode/authenticate/fixtures/users.json Loading all fixtures pipenv run python manage.py loaddata breathecode/*/fixtures/dev_*.json","title":"Fixtures"},{"location":"installation/fixtures/#fixtures","text":"Fixtures are fake data ideal for development.","title":"Fixtures"},{"location":"installation/fixtures/#saving-new-fixtures","text":"python manage.py dumpdata auth > ./breathecode/authenticate/fixtures/users.json","title":"Saving new fixtures"},{"location":"installation/fixtures/#loading-all-fixtures","text":"pipenv run python manage.py loaddata breathecode/*/fixtures/dev_*.json","title":"Loading all fixtures"},{"location":"security/capabilities/","text":"Capabilities Authenticated users must belong to at least one academy with a specific role, each role has a series of capabilities that specify what any user with that role will be \"capable\" of doing. Authenticated methods must be decorated with the @capable_of decorator in increase security validation. For example: from breathecode.utils import capable_of @capable_of ( 'crud_member' ) def post ( self , request , academy_id = None ): serializer = StaffPOSTSerializer ( data = request . data ) if serializer . is_valid (): serializer . save () return Response ( serializer . data , status = status . HTTP_201_CREATED ) return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) Any view decorated with the @capable_of must be used passing an academy id either: Anywhere on the endpoint url, E.g: path('academy/<int:academy_id>/member', MemberView.as_view()), Or on the request header using the Academy header. Available capabilities: This list is alive, it will grow and vary over time: slug description read_members Allows reading the list of academy members crud_members Allows creating, deleting and updating academy members","title":"Capabilities"},{"location":"security/capabilities/#capabilities","text":"Authenticated users must belong to at least one academy with a specific role, each role has a series of capabilities that specify what any user with that role will be \"capable\" of doing. Authenticated methods must be decorated with the @capable_of decorator in increase security validation. For example: from breathecode.utils import capable_of @capable_of ( 'crud_member' ) def post ( self , request , academy_id = None ): serializer = StaffPOSTSerializer ( data = request . data ) if serializer . is_valid (): serializer . save () return Response ( serializer . data , status = status . HTTP_201_CREATED ) return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) Any view decorated with the @capable_of must be used passing an academy id either: Anywhere on the endpoint url, E.g: path('academy/<int:academy_id>/member', MemberView.as_view()), Or on the request header using the Academy header.","title":"Capabilities"},{"location":"security/capabilities/#available-capabilities","text":"This list is alive, it will grow and vary over time: slug description read_members Allows reading the list of academy members crud_members Allows creating, deleting and updating academy members","title":"Available capabilities:"},{"location":"services/google_cloud/google-cloud-functions/","text":"Google Cloud Functions Write a HTTP function https://cloud.google.com/functions/docs/writing/http See active functions https://console.cloud.google.com/functions/list?project=breathecode-197918&_ga=2.252299017.106570839.1625533908-188955223.1618985878 Testing function https://cloud.google.com/functions/docs/testing/test-http#functions-testing-http-integration-python List functions Name Activator Resource Repository process-zap HTTP process-zap screenshots HTTP screenshots jefer94/screenshots resize-image HTTP resize-image breatheco-de/gcloud-resize-image thumbnail-generator Bucket media-breathecode breatheco-de/gcloud-thumbnail-generator thumbnail-generator-dev Bucket media-breathecode-dev breatheco-de/gcloud-thumbnail-generator","title":"Google Cloud Functions"},{"location":"services/google_cloud/google-cloud-functions/#google-cloud-functions","text":"","title":"Google Cloud Functions"},{"location":"services/google_cloud/google-cloud-functions/#write-a-http-function","text":"https://cloud.google.com/functions/docs/writing/http","title":"Write a HTTP function"},{"location":"services/google_cloud/google-cloud-functions/#see-active-functions","text":"https://console.cloud.google.com/functions/list?project=breathecode-197918&_ga=2.252299017.106570839.1625533908-188955223.1618985878","title":"See active functions"},{"location":"services/google_cloud/google-cloud-functions/#testing-function","text":"https://cloud.google.com/functions/docs/testing/test-http#functions-testing-http-integration-python","title":"Testing function"},{"location":"services/google_cloud/google-cloud-functions/#list-functions","text":"Name Activator Resource Repository process-zap HTTP process-zap screenshots HTTP screenshots jefer94/screenshots resize-image HTTP resize-image breatheco-de/gcloud-resize-image thumbnail-generator Bucket media-breathecode breatheco-de/gcloud-thumbnail-generator thumbnail-generator-dev Bucket media-breathecode-dev breatheco-de/gcloud-thumbnail-generator","title":"List functions"},{"location":"services/google_cloud/storage/","text":"Storage Storage Google Cloud Storage Source code in breathecode/services/google_cloud/storage.py class Storage : \"\"\"Google Cloud Storage\"\"\" client : storage . Client def __init__ ( self ) -> None : # from google.cloud.storage import Client credentials . resolve_credentials () self . client = storage . Client () def file ( self , bucket_name : str , file_name : str ) -> File : \"\"\"Get File object Args: bucket_name (str): Name of bucket in Google Cloud Storage file_name (str): Name of blob in Google Cloud Bucket Returns: File: File object \"\"\" bucket = self . client . bucket ( bucket_name ) return File ( bucket , file_name ) file ( self , bucket_name , file_name ) Get File object Parameters: Name Type Description Default bucket_name str Name of bucket in Google Cloud Storage required file_name str Name of blob in Google Cloud Bucket required Returns: Type Description File File object Source code in breathecode/services/google_cloud/storage.py def file ( self , bucket_name : str , file_name : str ) -> File : \"\"\"Get File object Args: bucket_name (str): Name of bucket in Google Cloud Storage file_name (str): Name of blob in Google Cloud Bucket Returns: File: File object \"\"\" bucket = self . client . bucket ( bucket_name ) return File ( bucket , file_name )","title":"Storage"},{"location":"services/google_cloud/storage/#storage","text":"","title":"Storage"},{"location":"services/google_cloud/storage/#breathecode.services.google_cloud.storage.Storage","text":"Google Cloud Storage Source code in breathecode/services/google_cloud/storage.py class Storage : \"\"\"Google Cloud Storage\"\"\" client : storage . Client def __init__ ( self ) -> None : # from google.cloud.storage import Client credentials . resolve_credentials () self . client = storage . Client () def file ( self , bucket_name : str , file_name : str ) -> File : \"\"\"Get File object Args: bucket_name (str): Name of bucket in Google Cloud Storage file_name (str): Name of blob in Google Cloud Bucket Returns: File: File object \"\"\" bucket = self . client . bucket ( bucket_name ) return File ( bucket , file_name )","title":"Storage"},{"location":"services/google_cloud/storage/#breathecode.services.google_cloud.storage.Storage.file","text":"Get File object Parameters: Name Type Description Default bucket_name str Name of bucket in Google Cloud Storage required file_name str Name of blob in Google Cloud Bucket required Returns: Type Description File File object Source code in breathecode/services/google_cloud/storage.py def file ( self , bucket_name : str , file_name : str ) -> File : \"\"\"Get File object Args: bucket_name (str): Name of bucket in Google Cloud Storage file_name (str): Name of blob in Google Cloud Bucket Returns: File: File object \"\"\" bucket = self . client . bucket ( bucket_name ) return File ( bucket , file_name )","title":"file()"},{"location":"services/slack%20integration/icons/","text":"Icons The following icons are being used for the slack integrations https://www.pngrepo.com/collection/soft-colored-ui-icons/1","title":"Icons"},{"location":"services/slack%20integration/icons/#icons","text":"The following icons are being used for the slack integrations https://www.pngrepo.com/collection/soft-colored-ui-icons/1","title":"Icons"},{"location":"signals/quickstart/","text":"Signals The official documentation for django signals can be found here . At BreatheCode, signals are similar concept to \"events\", we use signals as custom \"events\" that can notify important things that happen in one app to all the other app's (if they are listening). For example: When a student drops from a cohort There is a signal to notify when a student educational status gets updated , this is useful because other application may react to it. Here is the signal being initialized , here is being triggered/dispatched when a student gets saved and this is an example where the signal is being received on the breathecode.marketing.app to trigger some additional tasks within the system. When to use a signal Inside the breathecode team, we see signals for asynchronous processing of any side effects, we try to focus on them for communication between apps only. Declare a new signal You have many examples that you can find inside the code, each breathecode app has a file signals.py that contains all the signals dispatched by that app. If the file does not exist within one of the apps, and you need to create a signal for that app, you can create the file yourself. If you wanted to create a signal for when a cohort is saved, you should start by initializing it inside breathecode/admissions/signals.py like this: from django.dispatch import Signal cohort_saved = Signal () Dispatching a signal All the initialized signals are available on the same application signals.py file, if the signal you want to dispatch is not there, you should probably declare a new one. After the signal is initialized, it can be dispatched anywhere withing the same app, for example inside a serializer create method like this: from .signals import cohort_saved class CohortSerializer ( CohortSerializerMixin ): def create ( self , validated_data ): cohort = Cohort . objects . create ( ** validated_data , ** self . context ) cohort_saved . send ( instance = self , sender = CohortUser ) return cohort Receiving a signal All django applications can subscribe to recieve a signal, even if those signals are coming from another app, but you should always add your receiving code inside the receivers.py of the app that will react to the signal. The following code will receive the cohort_saved signal and print on the screen if its being created or updated. Note: Its a good idea to always connect receivers to tasks, that way you can asynconosly pospone any processing that you will do after the cohort its created. from breathecode.admissions.signals import student_edu_status_updated , cohort_saved from .models import FormEntry , ActiveCampaignAcademy from .tasks import add_cohort_task_to_student , add_cohort_slug_as_acp_tag @receiver ( cohort_saved , sender = Cohort ) def cohort_post_save ( sender , instance , created , * args , ** kwargs ): if created : print ( f \"The cohort { instance . id } was just created\" ) # you can call a task from task.py here. else : print ( f \"The cohort { instance . id } was just updated\" )","title":"Quickstart"},{"location":"signals/quickstart/#signals","text":"The official documentation for django signals can be found here . At BreatheCode, signals are similar concept to \"events\", we use signals as custom \"events\" that can notify important things that happen in one app to all the other app's (if they are listening). For example: When a student drops from a cohort There is a signal to notify when a student educational status gets updated , this is useful because other application may react to it. Here is the signal being initialized , here is being triggered/dispatched when a student gets saved and this is an example where the signal is being received on the breathecode.marketing.app to trigger some additional tasks within the system.","title":"Signals"},{"location":"signals/quickstart/#when-to-use-a-signal","text":"Inside the breathecode team, we see signals for asynchronous processing of any side effects, we try to focus on them for communication between apps only.","title":"When to use a signal"},{"location":"signals/quickstart/#declare-a-new-signal","text":"You have many examples that you can find inside the code, each breathecode app has a file signals.py that contains all the signals dispatched by that app. If the file does not exist within one of the apps, and you need to create a signal for that app, you can create the file yourself. If you wanted to create a signal for when a cohort is saved, you should start by initializing it inside breathecode/admissions/signals.py like this: from django.dispatch import Signal cohort_saved = Signal ()","title":"Declare a new signal"},{"location":"signals/quickstart/#dispatching-a-signal","text":"All the initialized signals are available on the same application signals.py file, if the signal you want to dispatch is not there, you should probably declare a new one. After the signal is initialized, it can be dispatched anywhere withing the same app, for example inside a serializer create method like this: from .signals import cohort_saved class CohortSerializer ( CohortSerializerMixin ): def create ( self , validated_data ): cohort = Cohort . objects . create ( ** validated_data , ** self . context ) cohort_saved . send ( instance = self , sender = CohortUser ) return cohort","title":"Dispatching a signal"},{"location":"signals/quickstart/#receiving-a-signal","text":"All django applications can subscribe to recieve a signal, even if those signals are coming from another app, but you should always add your receiving code inside the receivers.py of the app that will react to the signal. The following code will receive the cohort_saved signal and print on the screen if its being created or updated. Note: Its a good idea to always connect receivers to tasks, that way you can asynconosly pospone any processing that you will do after the cohort its created. from breathecode.admissions.signals import student_edu_status_updated , cohort_saved from .models import FormEntry , ActiveCampaignAcademy from .tasks import add_cohort_task_to_student , add_cohort_slug_as_acp_tag @receiver ( cohort_saved , sender = Cohort ) def cohort_post_save ( sender , instance , created , * args , ** kwargs ): if created : print ( f \"The cohort { instance . id } was just created\" ) # you can call a task from task.py here. else : print ( f \"The cohort { instance . id } was just updated\" )","title":"Receiving a signal"},{"location":"testing/runing-tests/","text":"Runing tests Run tests pipenv run test ./breathecode/ Run tests in parallel pipenv run ptest ./breathecode/ Run coverage pipenv run cov breathecode Run coverage in parallel pipenv run pcov breathecode Testing inside Docker (fallback option) Check which dependencies you need install in you operating system pipenv run doctor or python -m scripts.doctor . Install docker desktop in your Windows, else find a guide to install Docker and Docker Compose in your linux distribution uname -a . Generate the BreatheCode Shell image with pipenv run docker_build_shell . Run BreatheCode Shell with docker-compose run bc-shell Run pipenv run test , pipenv run ptest , pipenv run cov or pipenv run pcov .","title":"Runing tests"},{"location":"testing/runing-tests/#runing-tests","text":"","title":"Runing tests"},{"location":"testing/runing-tests/#run-tests","text":"pipenv run test ./breathecode/","title":"Run tests"},{"location":"testing/runing-tests/#run-tests-in-parallel","text":"pipenv run ptest ./breathecode/","title":"Run tests in parallel"},{"location":"testing/runing-tests/#run-coverage","text":"pipenv run cov breathecode","title":"Run coverage"},{"location":"testing/runing-tests/#run-coverage-in-parallel","text":"pipenv run pcov breathecode","title":"Run coverage in parallel"},{"location":"testing/runing-tests/#testing-inside-docker-fallback-option","text":"Check which dependencies you need install in you operating system pipenv run doctor or python -m scripts.doctor . Install docker desktop in your Windows, else find a guide to install Docker and Docker Compose in your linux distribution uname -a . Generate the BreatheCode Shell image with pipenv run docker_build_shell . Run BreatheCode Shell with docker-compose run bc-shell Run pipenv run test , pipenv run ptest , pipenv run cov or pipenv run pcov .","title":"Testing inside Docker (fallback option)"},{"location":"testing/mixins/bc-cache/","text":"Cache Mixin with the purpose of cover all the related with cache Source code in breathecode/tests/mixins/breathecode_mixin/cache.py class Cache : \"\"\"Mixin with the purpose of cover all the related with cache\"\"\" clear = CacheMixin . clear_cache _parent : APITestCase def __init__ ( self , parent ) -> None : self . _parent = parent clear ( self ) Clear the cache. Usage: self . bc . cache . clear () Source code in breathecode/tests/mixins/breathecode_mixin/cache.py def clear_cache ( self ) -> None : \"\"\" Clear the cache. Usage: ```py self.bc.cache.clear() ``` \"\"\" cache . clear ()","title":"bc.cache"},{"location":"testing/mixins/bc-cache/#breathecode.tests.mixins.breathecode_mixin.cache.Cache","text":"Mixin with the purpose of cover all the related with cache Source code in breathecode/tests/mixins/breathecode_mixin/cache.py class Cache : \"\"\"Mixin with the purpose of cover all the related with cache\"\"\" clear = CacheMixin . clear_cache _parent : APITestCase def __init__ ( self , parent ) -> None : self . _parent = parent","title":"Cache"},{"location":"testing/mixins/bc-cache/#breathecode.tests.mixins.breathecode_mixin.cache.Cache.clear","text":"Clear the cache. Usage: self . bc . cache . clear () Source code in breathecode/tests/mixins/breathecode_mixin/cache.py def clear_cache ( self ) -> None : \"\"\" Clear the cache. Usage: ```py self.bc.cache.clear() ``` \"\"\" cache . clear ()","title":"clear()"},{"location":"testing/mixins/bc-check/","text":"Check Mixin with the purpose of cover all the related with the custom asserts Source code in breathecode/tests/mixins/breathecode_mixin/check.py class Check : \"\"\"Mixin with the purpose of cover all the related with the custom asserts\"\"\" sha256 = Sha256Mixin . assertHash token = TokenMixin . assertToken _parent : APITestCase def __init__ ( self , parent ) -> None : self . _parent = parent def datetime_in_range ( self , start : datetime , end : datetime , date : datetime ) -> None : \"\"\" Check if a range if between start and end argument. Usage: ```py from django.utils import timezone start = timezone.now() in_range = timezone.now() end = timezone.now() out_of_range = timezone.now() # pass because this datetime is between start and end self.bc.check.datetime_in_range(start, end, in_range) # \ud83d\udfe2 # fail because this datetime is not between start and end self.bc.check.datetime_in_range(start, end, out_of_range) # \ud83d\udd34 ``` \"\"\" self . _parent . assertLess ( start , date ) self . _parent . assertGreater ( end , date ) def partial_equality ( self , first : dict | list [ dict ], second : dict | list [ dict ]) -> None : \"\"\" Fail if the two objects are partially unequal as determined by the '==' operator. Usage: ```py obj1 = {'key1': 1, 'key2': 2} obj2 = {'key2': 2, 'key3': 1} obj3 = {'key2': 2} # it's fail because the key3 is not in the obj1 self.bc.check.partial_equality(obj1, obj2) # \ud83d\udd34 # it's fail because the key1 is not in the obj2 self.bc.check.partial_equality(obj2, obj1) # \ud83d\udd34 # it's pass because the key2 exists in the obj1 self.bc.check.partial_equality(obj1, obj3) # \ud83d\udfe2 # it's pass because the key2 exists in the obj2 self.bc.check.partial_equality(obj2, obj3) # \ud83d\udfe2 # it's fail because the key1 is not in the obj3 self.bc.check.partial_equality(obj3, obj1) # \ud83d\udd34 # it's fail because the key3 is not in the obj3 self.bc.check.partial_equality(obj3, obj2) # \ud83d\udd34 ``` \"\"\" assert type ( first ) == type ( second ) if isinstance ( first , list ): assert len ( first ) == len ( second ) original = [] for i in range ( 0 , len ( first )): original . append ( self . _fill_partial_equality ( first [ i ], second [ i ])) else : original = self . _fill_partial_equality ( first , second ) self . _parent . assertEqual ( original , second ) def _fill_partial_equality ( self , first : dict , second : dict ) -> dict : original = {} for key in second . keys (): original [ key ] = second [ key ] return original def queryset_of ( self , query : Any , model : Model ) -> None : \"\"\" Check if the first argument is a queryset of a models provided as second argument. Usage: ```py from breathecode.admissions.models import Cohort, Academy self.bc.database.create(cohort=1) collection = [] queryset = Cohort.objects.filter() # pass because the first argument is a QuerySet and it's type Cohort self.bc.check.queryset_of(queryset, Cohort) # \ud83d\udfe2 # fail because the first argument is a QuerySet and it is not type Academy self.bc.check.queryset_of(queryset, Academy) # \ud83d\udd34 # fail because the first argument is not a QuerySet self.bc.check.queryset_of(collection, Academy) # \ud83d\udd34 ``` \"\"\" if not isinstance ( query , QuerySet ): self . _parent . fail ( 'The first argument is not a QuerySet' ) if query . model != model : self . _parent . fail ( f 'The QuerySet is type { query . model . __name__ } instead of { model . __name__ } ' ) def queryset_with_pks ( self , query : Any , pks : list [ int ]) -> None : \"\"\" Check if the queryset have the following primary keys. Usage: ```py from breathecode.admissions.models import Cohort, Academy self.bc.database.create(cohort=1) collection = [] queryset = Cohort.objects.filter() # pass because the QuerySet has the primary keys 1 self.bc.check.queryset_with_pks(queryset, [1]) # \ud83d\udfe2 # fail because the QuerySet has the primary keys 1 but the second argument is empty self.bc.check.queryset_with_pks(queryset, []) # \ud83d\udd34 ``` \"\"\" if not isinstance ( query , QuerySet ): self . _parent . fail ( 'The first argument is not a QuerySet' ) self . _parent . assertEqual ([ x . pk for x in query ], pks ) datetime_in_range ( self , start , end , date ) Check if a range if between start and end argument. Usage: from django.utils import timezone start = timezone . now () in_range = timezone . now () end = timezone . now () out_of_range = timezone . now () # pass because this datetime is between start and end self . bc . check . datetime_in_range ( start , end , in_range ) # \ud83d\udfe2 # fail because this datetime is not between start and end self . bc . check . datetime_in_range ( start , end , out_of_range ) # \ud83d\udd34 Source code in breathecode/tests/mixins/breathecode_mixin/check.py def datetime_in_range ( self , start : datetime , end : datetime , date : datetime ) -> None : \"\"\" Check if a range if between start and end argument. Usage: ```py from django.utils import timezone start = timezone.now() in_range = timezone.now() end = timezone.now() out_of_range = timezone.now() # pass because this datetime is between start and end self.bc.check.datetime_in_range(start, end, in_range) # \ud83d\udfe2 # fail because this datetime is not between start and end self.bc.check.datetime_in_range(start, end, out_of_range) # \ud83d\udd34 ``` \"\"\" self . _parent . assertLess ( start , date ) self . _parent . assertGreater ( end , date ) partial_equality ( self , first , second ) Fail if the two objects are partially unequal as determined by the '==' operator. Usage: obj1 = { 'key1' : 1 , 'key2' : 2 } obj2 = { 'key2' : 2 , 'key3' : 1 } obj3 = { 'key2' : 2 } # it's fail because the key3 is not in the obj1 self . bc . check . partial_equality ( obj1 , obj2 ) # \ud83d\udd34 # it's fail because the key1 is not in the obj2 self . bc . check . partial_equality ( obj2 , obj1 ) # \ud83d\udd34 # it's pass because the key2 exists in the obj1 self . bc . check . partial_equality ( obj1 , obj3 ) # \ud83d\udfe2 # it's pass because the key2 exists in the obj2 self . bc . check . partial_equality ( obj2 , obj3 ) # \ud83d\udfe2 # it's fail because the key1 is not in the obj3 self . bc . check . partial_equality ( obj3 , obj1 ) # \ud83d\udd34 # it's fail because the key3 is not in the obj3 self . bc . check . partial_equality ( obj3 , obj2 ) # \ud83d\udd34 Source code in breathecode/tests/mixins/breathecode_mixin/check.py def partial_equality ( self , first : dict | list [ dict ], second : dict | list [ dict ]) -> None : \"\"\" Fail if the two objects are partially unequal as determined by the '==' operator. Usage: ```py obj1 = {'key1': 1, 'key2': 2} obj2 = {'key2': 2, 'key3': 1} obj3 = {'key2': 2} # it's fail because the key3 is not in the obj1 self.bc.check.partial_equality(obj1, obj2) # \ud83d\udd34 # it's fail because the key1 is not in the obj2 self.bc.check.partial_equality(obj2, obj1) # \ud83d\udd34 # it's pass because the key2 exists in the obj1 self.bc.check.partial_equality(obj1, obj3) # \ud83d\udfe2 # it's pass because the key2 exists in the obj2 self.bc.check.partial_equality(obj2, obj3) # \ud83d\udfe2 # it's fail because the key1 is not in the obj3 self.bc.check.partial_equality(obj3, obj1) # \ud83d\udd34 # it's fail because the key3 is not in the obj3 self.bc.check.partial_equality(obj3, obj2) # \ud83d\udd34 ``` \"\"\" assert type ( first ) == type ( second ) if isinstance ( first , list ): assert len ( first ) == len ( second ) original = [] for i in range ( 0 , len ( first )): original . append ( self . _fill_partial_equality ( first [ i ], second [ i ])) else : original = self . _fill_partial_equality ( first , second ) self . _parent . assertEqual ( original , second ) queryset_of ( self , query , model ) Check if the first argument is a queryset of a models provided as second argument. Usage: from breathecode.admissions.models import Cohort , Academy self . bc . database . create ( cohort = 1 ) collection = [] queryset = Cohort . objects . filter () # pass because the first argument is a QuerySet and it's type Cohort self . bc . check . queryset_of ( queryset , Cohort ) # \ud83d\udfe2 # fail because the first argument is a QuerySet and it is not type Academy self . bc . check . queryset_of ( queryset , Academy ) # \ud83d\udd34 # fail because the first argument is not a QuerySet self . bc . check . queryset_of ( collection , Academy ) # \ud83d\udd34 Source code in breathecode/tests/mixins/breathecode_mixin/check.py def queryset_of ( self , query : Any , model : Model ) -> None : \"\"\" Check if the first argument is a queryset of a models provided as second argument. Usage: ```py from breathecode.admissions.models import Cohort, Academy self.bc.database.create(cohort=1) collection = [] queryset = Cohort.objects.filter() # pass because the first argument is a QuerySet and it's type Cohort self.bc.check.queryset_of(queryset, Cohort) # \ud83d\udfe2 # fail because the first argument is a QuerySet and it is not type Academy self.bc.check.queryset_of(queryset, Academy) # \ud83d\udd34 # fail because the first argument is not a QuerySet self.bc.check.queryset_of(collection, Academy) # \ud83d\udd34 ``` \"\"\" if not isinstance ( query , QuerySet ): self . _parent . fail ( 'The first argument is not a QuerySet' ) if query . model != model : self . _parent . fail ( f 'The QuerySet is type { query . model . __name__ } instead of { model . __name__ } ' ) queryset_with_pks ( self , query , pks ) Check if the queryset have the following primary keys. Usage: from breathecode.admissions.models import Cohort , Academy self . bc . database . create ( cohort = 1 ) collection = [] queryset = Cohort . objects . filter () # pass because the QuerySet has the primary keys 1 self . bc . check . queryset_with_pks ( queryset , [ 1 ]) # \ud83d\udfe2 # fail because the QuerySet has the primary keys 1 but the second argument is empty self . bc . check . queryset_with_pks ( queryset , []) # \ud83d\udd34 Source code in breathecode/tests/mixins/breathecode_mixin/check.py def queryset_with_pks ( self , query : Any , pks : list [ int ]) -> None : \"\"\" Check if the queryset have the following primary keys. Usage: ```py from breathecode.admissions.models import Cohort, Academy self.bc.database.create(cohort=1) collection = [] queryset = Cohort.objects.filter() # pass because the QuerySet has the primary keys 1 self.bc.check.queryset_with_pks(queryset, [1]) # \ud83d\udfe2 # fail because the QuerySet has the primary keys 1 but the second argument is empty self.bc.check.queryset_with_pks(queryset, []) # \ud83d\udd34 ``` \"\"\" if not isinstance ( query , QuerySet ): self . _parent . fail ( 'The first argument is not a QuerySet' ) self . _parent . assertEqual ([ x . pk for x in query ], pks ) sha256 ( self , expected ) Assert that token is valid format. Usage: rigth_hash = 'f6fc84c9f21c24907d6bee6eec38cabab5fa9a7be8c4a7827fe9e56f245bd2d5' bad_hash = 'Potato' # pass because is a right hash self . bc . check . sha256 ( rigth_hash ) # \ud83d\udfe2 # fail because is a bad hash self . bc . check . sha256 ( bad_hash ) # \ud83d\udd34 Source code in breathecode/tests/mixins/breathecode_mixin/check.py def assertHash ( self , expected : str ): \"\"\" Assert that token is valid format. Usage: ```py rigth_hash = 'f6fc84c9f21c24907d6bee6eec38cabab5fa9a7be8c4a7827fe9e56f245bd2d5' bad_hash = 'Potato' # pass because is a right hash self.bc.check.sha256(rigth_hash) # \ud83d\udfe2 # fail because is a bad hash self.bc.check.sha256(bad_hash) # \ud83d\udd34 ``` \"\"\" self . assertTrue ( bool ( self . __hash_pattern__ . match ( expected ))) token ( self , expected ) Assert that token have a valid format. Usage: rigth_token = 'f6fc84c9f21c24907d6bee6eec38cabab5fa9a7be8c4a7827fe9e56f245bd2d5' bad_token = 'Potato' # pass because is a right token self . bc . check . token ( rigth_hash ) # \ud83d\udfe2 # fail because is a bad token self . bc . check . token ( bad_hash ) # \ud83d\udd34 Source code in breathecode/tests/mixins/breathecode_mixin/check.py def assertToken ( self , expected : str ): \"\"\" Assert that token have a valid format. Usage: ```py rigth_token = 'f6fc84c9f21c24907d6bee6eec38cabab5fa9a7be8c4a7827fe9e56f245bd2d5' bad_token = 'Potato' # pass because is a right token self.bc.check.token(rigth_hash) # \ud83d\udfe2 # fail because is a bad token self.bc.check.token(bad_hash) # \ud83d\udd34 ``` \"\"\" self . assertTrue ( bool ( self . __token_pattern__ . match ( expected )))","title":"bc.check"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check","text":"Mixin with the purpose of cover all the related with the custom asserts Source code in breathecode/tests/mixins/breathecode_mixin/check.py class Check : \"\"\"Mixin with the purpose of cover all the related with the custom asserts\"\"\" sha256 = Sha256Mixin . assertHash token = TokenMixin . assertToken _parent : APITestCase def __init__ ( self , parent ) -> None : self . _parent = parent def datetime_in_range ( self , start : datetime , end : datetime , date : datetime ) -> None : \"\"\" Check if a range if between start and end argument. Usage: ```py from django.utils import timezone start = timezone.now() in_range = timezone.now() end = timezone.now() out_of_range = timezone.now() # pass because this datetime is between start and end self.bc.check.datetime_in_range(start, end, in_range) # \ud83d\udfe2 # fail because this datetime is not between start and end self.bc.check.datetime_in_range(start, end, out_of_range) # \ud83d\udd34 ``` \"\"\" self . _parent . assertLess ( start , date ) self . _parent . assertGreater ( end , date ) def partial_equality ( self , first : dict | list [ dict ], second : dict | list [ dict ]) -> None : \"\"\" Fail if the two objects are partially unequal as determined by the '==' operator. Usage: ```py obj1 = {'key1': 1, 'key2': 2} obj2 = {'key2': 2, 'key3': 1} obj3 = {'key2': 2} # it's fail because the key3 is not in the obj1 self.bc.check.partial_equality(obj1, obj2) # \ud83d\udd34 # it's fail because the key1 is not in the obj2 self.bc.check.partial_equality(obj2, obj1) # \ud83d\udd34 # it's pass because the key2 exists in the obj1 self.bc.check.partial_equality(obj1, obj3) # \ud83d\udfe2 # it's pass because the key2 exists in the obj2 self.bc.check.partial_equality(obj2, obj3) # \ud83d\udfe2 # it's fail because the key1 is not in the obj3 self.bc.check.partial_equality(obj3, obj1) # \ud83d\udd34 # it's fail because the key3 is not in the obj3 self.bc.check.partial_equality(obj3, obj2) # \ud83d\udd34 ``` \"\"\" assert type ( first ) == type ( second ) if isinstance ( first , list ): assert len ( first ) == len ( second ) original = [] for i in range ( 0 , len ( first )): original . append ( self . _fill_partial_equality ( first [ i ], second [ i ])) else : original = self . _fill_partial_equality ( first , second ) self . _parent . assertEqual ( original , second ) def _fill_partial_equality ( self , first : dict , second : dict ) -> dict : original = {} for key in second . keys (): original [ key ] = second [ key ] return original def queryset_of ( self , query : Any , model : Model ) -> None : \"\"\" Check if the first argument is a queryset of a models provided as second argument. Usage: ```py from breathecode.admissions.models import Cohort, Academy self.bc.database.create(cohort=1) collection = [] queryset = Cohort.objects.filter() # pass because the first argument is a QuerySet and it's type Cohort self.bc.check.queryset_of(queryset, Cohort) # \ud83d\udfe2 # fail because the first argument is a QuerySet and it is not type Academy self.bc.check.queryset_of(queryset, Academy) # \ud83d\udd34 # fail because the first argument is not a QuerySet self.bc.check.queryset_of(collection, Academy) # \ud83d\udd34 ``` \"\"\" if not isinstance ( query , QuerySet ): self . _parent . fail ( 'The first argument is not a QuerySet' ) if query . model != model : self . _parent . fail ( f 'The QuerySet is type { query . model . __name__ } instead of { model . __name__ } ' ) def queryset_with_pks ( self , query : Any , pks : list [ int ]) -> None : \"\"\" Check if the queryset have the following primary keys. Usage: ```py from breathecode.admissions.models import Cohort, Academy self.bc.database.create(cohort=1) collection = [] queryset = Cohort.objects.filter() # pass because the QuerySet has the primary keys 1 self.bc.check.queryset_with_pks(queryset, [1]) # \ud83d\udfe2 # fail because the QuerySet has the primary keys 1 but the second argument is empty self.bc.check.queryset_with_pks(queryset, []) # \ud83d\udd34 ``` \"\"\" if not isinstance ( query , QuerySet ): self . _parent . fail ( 'The first argument is not a QuerySet' ) self . _parent . assertEqual ([ x . pk for x in query ], pks )","title":"Check"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.datetime_in_range","text":"Check if a range if between start and end argument. Usage: from django.utils import timezone start = timezone . now () in_range = timezone . now () end = timezone . now () out_of_range = timezone . now () # pass because this datetime is between start and end self . bc . check . datetime_in_range ( start , end , in_range ) # \ud83d\udfe2 # fail because this datetime is not between start and end self . bc . check . datetime_in_range ( start , end , out_of_range ) # \ud83d\udd34 Source code in breathecode/tests/mixins/breathecode_mixin/check.py def datetime_in_range ( self , start : datetime , end : datetime , date : datetime ) -> None : \"\"\" Check if a range if between start and end argument. Usage: ```py from django.utils import timezone start = timezone.now() in_range = timezone.now() end = timezone.now() out_of_range = timezone.now() # pass because this datetime is between start and end self.bc.check.datetime_in_range(start, end, in_range) # \ud83d\udfe2 # fail because this datetime is not between start and end self.bc.check.datetime_in_range(start, end, out_of_range) # \ud83d\udd34 ``` \"\"\" self . _parent . assertLess ( start , date ) self . _parent . assertGreater ( end , date )","title":"datetime_in_range()"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.partial_equality","text":"Fail if the two objects are partially unequal as determined by the '==' operator. Usage: obj1 = { 'key1' : 1 , 'key2' : 2 } obj2 = { 'key2' : 2 , 'key3' : 1 } obj3 = { 'key2' : 2 } # it's fail because the key3 is not in the obj1 self . bc . check . partial_equality ( obj1 , obj2 ) # \ud83d\udd34 # it's fail because the key1 is not in the obj2 self . bc . check . partial_equality ( obj2 , obj1 ) # \ud83d\udd34 # it's pass because the key2 exists in the obj1 self . bc . check . partial_equality ( obj1 , obj3 ) # \ud83d\udfe2 # it's pass because the key2 exists in the obj2 self . bc . check . partial_equality ( obj2 , obj3 ) # \ud83d\udfe2 # it's fail because the key1 is not in the obj3 self . bc . check . partial_equality ( obj3 , obj1 ) # \ud83d\udd34 # it's fail because the key3 is not in the obj3 self . bc . check . partial_equality ( obj3 , obj2 ) # \ud83d\udd34 Source code in breathecode/tests/mixins/breathecode_mixin/check.py def partial_equality ( self , first : dict | list [ dict ], second : dict | list [ dict ]) -> None : \"\"\" Fail if the two objects are partially unequal as determined by the '==' operator. Usage: ```py obj1 = {'key1': 1, 'key2': 2} obj2 = {'key2': 2, 'key3': 1} obj3 = {'key2': 2} # it's fail because the key3 is not in the obj1 self.bc.check.partial_equality(obj1, obj2) # \ud83d\udd34 # it's fail because the key1 is not in the obj2 self.bc.check.partial_equality(obj2, obj1) # \ud83d\udd34 # it's pass because the key2 exists in the obj1 self.bc.check.partial_equality(obj1, obj3) # \ud83d\udfe2 # it's pass because the key2 exists in the obj2 self.bc.check.partial_equality(obj2, obj3) # \ud83d\udfe2 # it's fail because the key1 is not in the obj3 self.bc.check.partial_equality(obj3, obj1) # \ud83d\udd34 # it's fail because the key3 is not in the obj3 self.bc.check.partial_equality(obj3, obj2) # \ud83d\udd34 ``` \"\"\" assert type ( first ) == type ( second ) if isinstance ( first , list ): assert len ( first ) == len ( second ) original = [] for i in range ( 0 , len ( first )): original . append ( self . _fill_partial_equality ( first [ i ], second [ i ])) else : original = self . _fill_partial_equality ( first , second ) self . _parent . assertEqual ( original , second )","title":"partial_equality()"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.queryset_of","text":"Check if the first argument is a queryset of a models provided as second argument. Usage: from breathecode.admissions.models import Cohort , Academy self . bc . database . create ( cohort = 1 ) collection = [] queryset = Cohort . objects . filter () # pass because the first argument is a QuerySet and it's type Cohort self . bc . check . queryset_of ( queryset , Cohort ) # \ud83d\udfe2 # fail because the first argument is a QuerySet and it is not type Academy self . bc . check . queryset_of ( queryset , Academy ) # \ud83d\udd34 # fail because the first argument is not a QuerySet self . bc . check . queryset_of ( collection , Academy ) # \ud83d\udd34 Source code in breathecode/tests/mixins/breathecode_mixin/check.py def queryset_of ( self , query : Any , model : Model ) -> None : \"\"\" Check if the first argument is a queryset of a models provided as second argument. Usage: ```py from breathecode.admissions.models import Cohort, Academy self.bc.database.create(cohort=1) collection = [] queryset = Cohort.objects.filter() # pass because the first argument is a QuerySet and it's type Cohort self.bc.check.queryset_of(queryset, Cohort) # \ud83d\udfe2 # fail because the first argument is a QuerySet and it is not type Academy self.bc.check.queryset_of(queryset, Academy) # \ud83d\udd34 # fail because the first argument is not a QuerySet self.bc.check.queryset_of(collection, Academy) # \ud83d\udd34 ``` \"\"\" if not isinstance ( query , QuerySet ): self . _parent . fail ( 'The first argument is not a QuerySet' ) if query . model != model : self . _parent . fail ( f 'The QuerySet is type { query . model . __name__ } instead of { model . __name__ } ' )","title":"queryset_of()"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.queryset_with_pks","text":"Check if the queryset have the following primary keys. Usage: from breathecode.admissions.models import Cohort , Academy self . bc . database . create ( cohort = 1 ) collection = [] queryset = Cohort . objects . filter () # pass because the QuerySet has the primary keys 1 self . bc . check . queryset_with_pks ( queryset , [ 1 ]) # \ud83d\udfe2 # fail because the QuerySet has the primary keys 1 but the second argument is empty self . bc . check . queryset_with_pks ( queryset , []) # \ud83d\udd34 Source code in breathecode/tests/mixins/breathecode_mixin/check.py def queryset_with_pks ( self , query : Any , pks : list [ int ]) -> None : \"\"\" Check if the queryset have the following primary keys. Usage: ```py from breathecode.admissions.models import Cohort, Academy self.bc.database.create(cohort=1) collection = [] queryset = Cohort.objects.filter() # pass because the QuerySet has the primary keys 1 self.bc.check.queryset_with_pks(queryset, [1]) # \ud83d\udfe2 # fail because the QuerySet has the primary keys 1 but the second argument is empty self.bc.check.queryset_with_pks(queryset, []) # \ud83d\udd34 ``` \"\"\" if not isinstance ( query , QuerySet ): self . _parent . fail ( 'The first argument is not a QuerySet' ) self . _parent . assertEqual ([ x . pk for x in query ], pks )","title":"queryset_with_pks()"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.sha256","text":"Assert that token is valid format. Usage: rigth_hash = 'f6fc84c9f21c24907d6bee6eec38cabab5fa9a7be8c4a7827fe9e56f245bd2d5' bad_hash = 'Potato' # pass because is a right hash self . bc . check . sha256 ( rigth_hash ) # \ud83d\udfe2 # fail because is a bad hash self . bc . check . sha256 ( bad_hash ) # \ud83d\udd34 Source code in breathecode/tests/mixins/breathecode_mixin/check.py def assertHash ( self , expected : str ): \"\"\" Assert that token is valid format. Usage: ```py rigth_hash = 'f6fc84c9f21c24907d6bee6eec38cabab5fa9a7be8c4a7827fe9e56f245bd2d5' bad_hash = 'Potato' # pass because is a right hash self.bc.check.sha256(rigth_hash) # \ud83d\udfe2 # fail because is a bad hash self.bc.check.sha256(bad_hash) # \ud83d\udd34 ``` \"\"\" self . assertTrue ( bool ( self . __hash_pattern__ . match ( expected )))","title":"sha256()"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.token","text":"Assert that token have a valid format. Usage: rigth_token = 'f6fc84c9f21c24907d6bee6eec38cabab5fa9a7be8c4a7827fe9e56f245bd2d5' bad_token = 'Potato' # pass because is a right token self . bc . check . token ( rigth_hash ) # \ud83d\udfe2 # fail because is a bad token self . bc . check . token ( bad_hash ) # \ud83d\udd34 Source code in breathecode/tests/mixins/breathecode_mixin/check.py def assertToken ( self , expected : str ): \"\"\" Assert that token have a valid format. Usage: ```py rigth_token = 'f6fc84c9f21c24907d6bee6eec38cabab5fa9a7be8c4a7827fe9e56f245bd2d5' bad_token = 'Potato' # pass because is a right token self.bc.check.token(rigth_hash) # \ud83d\udfe2 # fail because is a bad token self.bc.check.token(bad_hash) # \ud83d\udd34 ``` \"\"\" self . assertTrue ( bool ( self . __token_pattern__ . match ( expected )))","title":"token()"},{"location":"testing/mixins/bc-database/","text":"Database Mixin with the purpose of cover all the related with the database Source code in breathecode/tests/mixins/breathecode_mixin/database.py class Database : \"\"\"Mixin with the purpose of cover all the related with the database\"\"\" _cache : dict [ str , Model ] = {} _parent : APITestCase def __init__ ( self , parent ) -> None : self . _parent = parent @classmethod def _get_model ( cls , path : str ) -> Model : \"\"\"Get model class\"\"\" if path in cls . _cache : return cls . _cache [ path ] app_label , model_name = path . split ( '.' ) cls . _cache [ path ] = apps . get_model ( app_label , model_name ) return cls . _cache [ path ] def list_of ( self , path : str , dict : bool = True ) -> list [ Model | dict [ str , Any ]]: \"\"\" This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if `dict=True` else get a list of `Model` instances. Usage: ```py # get all the Cohort as list of dict self.bc.database.get('admissions.Cohort') # get all the Cohort as list of instances of model self.bc.database.get('admissions.Cohort', dict=False) ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. - dict(`bool`): if true return dict of values of model else return model instance. \"\"\" model = Database . _get_model ( path ) result = model . objects . filter () if dict : result = [ ModelsMixin . remove_dinamics_fields ( self , data . __dict__ . copy ()) for data in result ] return result def delete ( self , path : str , pk : Optional [ int or str ] = None ) -> tuple [ int , dict [ str , int ]]: \"\"\" This is a wrapper for `Model.objects.filter(pk=pk).delete()`, delete a element if `pk` is provided else all the entries. Usage: ```py # create 19110911 cohorts \ud83e\uddbe self.bc.database.create(cohort=19110911) # exists 19110911 cohorts \ud83e\uddbe self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110911) # remove all the cohorts self.bc.database.delete(10) # exists 19110910 cohorts self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110910) ``` # remove all the cohorts self.bc.database.delete() # exists 0 cohorts self.assertEqual(self.bc.database.count('admissions.Cohort'), 0) ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. - pk(`str | int`): primary key of model. \"\"\" lookups = { 'pk' : pk } if pk else {} model = Database . _get_model ( path ) return model . objects . filter ( ** lookups ) . delete () def get ( self , path : str , pk : int or str , dict : bool = True ) -> Model | dict [ str , Any ]: \"\"\" This is a wrapper for `Model.objects.filter(pk=pk).first()`, get the values of model as `dict` if `dict=True` else get the `Model` instance. Usage: ```py # get the Cohort with the pk 1 as dict self.bc.database.get('admissions.Cohort', 1) # get the Cohort with the pk 1 as instance of model self.bc.database.get('admissions.Cohort', 1, dict=False) ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. - pk(`str | int`): primary key of model. - dict(`bool`): if true return dict of values of model else return model instance. \"\"\" model = Database . _get_model ( path ) result = model . objects . filter ( pk = pk ) . first () if dict : result = ModelsMixin . remove_dinamics_fields ( self , result . __dict__ . copy ()) return result def count ( self , path : str ) -> int : \"\"\" This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved. Usage: ```py self.bc.database.count('admissions.Cohort') ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. \"\"\" model = Database . _get_model ( path ) return model . objects . count () def create ( self , * args , ** kwargs ) -> dict [ str , Model | list [ Model ]]: \"\"\" Create one o many instances of models and return it like a dict of models. Usage: ```py # create three users self.bc.database.create(user=3) # create one user with a specific first name user = {'first_name': 'Lacey'} self.bc.database.create(user=user) # create two users with a specific first name and last name users = [ {'first_name': 'Lacey', 'last_name': 'Sturm'}, {'first_name': 'The', 'last_name': 'Warning'}, ] self.bc.database.create(user=users) # create two users with the same first name user = {'first_name': 'Lacey'} self.bc.database.create(user=(2, user)) # setting up manually the relationships cohort_user = {'cohort_id': 2} self.bc.database.create(cohort=2, cohort_user=cohort_user) ``` It get the model name as snake case, you can pass a `bool`, `int`, `dict`, `tuple`, `list[dict]` or `list[tuple]`. Behavior for type of argument: - `bool`: if it is true generate a instance of a model. - `int`: generate a instance of a model n times, if `n` > 1 this is a list. - `dict`: generate a instance of a model, this pass to mixer.blend custom values to the model. - `tuple`: one element need to be a int and the other be a dict, generate a instance of a model n times, if `n` > 1 this is a list, this pass to mixer.blend custom values to the model. - `list[dict]`: generate a instance of a model n times, if `n` > 1 this is a list, this pass to mixer.blend custom values to the model. - `list[tuple]`: generate a instance of a model n times, if `n` > 1 this is a list for each element, this pass to mixer.blend custom values to the model. Keywords arguments deprecated: - models: this arguments is use to implement inheritance, receive as argument the output of other `self.bc.database.create()` execution. - authenticate: create a user and use `APITestCase.client.force_authenticate(user=models['user'])` to get credentials. \"\"\" return GenerateModelsMixin . generate_models ( self . _parent , _new_implementation = True , * args , ** kwargs ) count ( self , path ) This is a wrapper for Model.objects.count() , get how many instances of this Model are saved. Usage: self . bc . database . count ( 'admissions.Cohort' ) Keywords arguments: - path( str ): path to a model, for example admissions.CohortUser . Source code in breathecode/tests/mixins/breathecode_mixin/database.py def count ( self , path : str ) -> int : \"\"\" This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved. Usage: ```py self.bc.database.count('admissions.Cohort') ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. \"\"\" model = Database . _get_model ( path ) return model . objects . count () create ( self , * args , ** kwargs ) Create one o many instances of models and return it like a dict of models. Usage: # create three users self . bc . database . create ( user = 3 ) # create one user with a specific first name user = { 'first_name' : 'Lacey' } self . bc . database . create ( user = user ) # create two users with a specific first name and last name users = [ { 'first_name' : 'Lacey' , 'last_name' : 'Sturm' }, { 'first_name' : 'The' , 'last_name' : 'Warning' }, ] self . bc . database . create ( user = users ) # create two users with the same first name user = { 'first_name' : 'Lacey' } self . bc . database . create ( user = ( 2 , user )) # setting up manually the relationships cohort_user = { 'cohort_id' : 2 } self . bc . database . create ( cohort = 2 , cohort_user = cohort_user ) It get the model name as snake case, you can pass a bool , int , dict , tuple , list[dict] or list[tuple] . Behavior for type of argument: bool : if it is true generate a instance of a model. int : generate a instance of a model n times, if n > 1 this is a list. dict : generate a instance of a model, this pass to mixer.blend custom values to the model. tuple : one element need to be a int and the other be a dict, generate a instance of a model n times, if n > 1 this is a list, this pass to mixer.blend custom values to the model. list[dict] : generate a instance of a model n times, if n > 1 this is a list, this pass to mixer.blend custom values to the model. list[tuple] : generate a instance of a model n times, if n > 1 this is a list for each element, this pass to mixer.blend custom values to the model. Keywords arguments deprecated: - models: this arguments is use to implement inheritance, receive as argument the output of other self.bc.database.create() execution. - authenticate: create a user and use APITestCase.client.force_authenticate(user=models['user']) to get credentials. Source code in breathecode/tests/mixins/breathecode_mixin/database.py def create ( self , * args , ** kwargs ) -> dict [ str , Model | list [ Model ]]: \"\"\" Create one o many instances of models and return it like a dict of models. Usage: ```py # create three users self.bc.database.create(user=3) # create one user with a specific first name user = {'first_name': 'Lacey'} self.bc.database.create(user=user) # create two users with a specific first name and last name users = [ {'first_name': 'Lacey', 'last_name': 'Sturm'}, {'first_name': 'The', 'last_name': 'Warning'}, ] self.bc.database.create(user=users) # create two users with the same first name user = {'first_name': 'Lacey'} self.bc.database.create(user=(2, user)) # setting up manually the relationships cohort_user = {'cohort_id': 2} self.bc.database.create(cohort=2, cohort_user=cohort_user) ``` It get the model name as snake case, you can pass a `bool`, `int`, `dict`, `tuple`, `list[dict]` or `list[tuple]`. Behavior for type of argument: - `bool`: if it is true generate a instance of a model. - `int`: generate a instance of a model n times, if `n` > 1 this is a list. - `dict`: generate a instance of a model, this pass to mixer.blend custom values to the model. - `tuple`: one element need to be a int and the other be a dict, generate a instance of a model n times, if `n` > 1 this is a list, this pass to mixer.blend custom values to the model. - `list[dict]`: generate a instance of a model n times, if `n` > 1 this is a list, this pass to mixer.blend custom values to the model. - `list[tuple]`: generate a instance of a model n times, if `n` > 1 this is a list for each element, this pass to mixer.blend custom values to the model. Keywords arguments deprecated: - models: this arguments is use to implement inheritance, receive as argument the output of other `self.bc.database.create()` execution. - authenticate: create a user and use `APITestCase.client.force_authenticate(user=models['user'])` to get credentials. \"\"\" return GenerateModelsMixin . generate_models ( self . _parent , _new_implementation = True , * args , ** kwargs ) delete ( self , path , pk = None ) This is a wrapper for Model.objects.filter(pk=pk).delete() , delete a element if pk is provided else all the entries. Usage: # create 19110911 cohorts \ud83e\uddbe self . bc . database . create ( cohort = 19110911 ) # exists 19110911 cohorts \ud83e\uddbe self . assertEqual ( self . bc . database . count ( 'admissions.Cohort' ), 19110911 ) # remove all the cohorts self . bc . database . delete ( 10 ) # exists 19110910 cohorts self . assertEqual ( self . bc . database . count ( 'admissions.Cohort' ), 19110910 ) remove all the cohorts self.bc.database.delete() exists 0 cohorts self.assertEqual(self.bc.database.count('admissions.Cohort'), 0) ``` Keywords arguments: - path( str ): path to a model, for example admissions.CohortUser . - pk( str | int ): primary key of model. Source code in breathecode/tests/mixins/breathecode_mixin/database.py def delete ( self , path : str , pk : Optional [ int or str ] = None ) -> tuple [ int , dict [ str , int ]]: \"\"\" This is a wrapper for `Model.objects.filter(pk=pk).delete()`, delete a element if `pk` is provided else all the entries. Usage: ```py # create 19110911 cohorts \ud83e\uddbe self.bc.database.create(cohort=19110911) # exists 19110911 cohorts \ud83e\uddbe self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110911) # remove all the cohorts self.bc.database.delete(10) # exists 19110910 cohorts self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110910) ``` # remove all the cohorts self.bc.database.delete() # exists 0 cohorts self.assertEqual(self.bc.database.count('admissions.Cohort'), 0) ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. - pk(`str | int`): primary key of model. \"\"\" lookups = { 'pk' : pk } if pk else {} model = Database . _get_model ( path ) return model . objects . filter ( ** lookups ) . delete () get ( self , path , pk , dict = True ) This is a wrapper for Model.objects.filter(pk=pk).first() , get the values of model as dict if dict=True else get the Model instance. Usage: # get the Cohort with the pk 1 as dict self . bc . database . get ( 'admissions.Cohort' , 1 ) # get the Cohort with the pk 1 as instance of model self . bc . database . get ( 'admissions.Cohort' , 1 , dict = False ) Keywords arguments: - path( str ): path to a model, for example admissions.CohortUser . - pk( str | int ): primary key of model. - dict( bool ): if true return dict of values of model else return model instance. Source code in breathecode/tests/mixins/breathecode_mixin/database.py def get ( self , path : str , pk : int or str , dict : bool = True ) -> Model | dict [ str , Any ]: \"\"\" This is a wrapper for `Model.objects.filter(pk=pk).first()`, get the values of model as `dict` if `dict=True` else get the `Model` instance. Usage: ```py # get the Cohort with the pk 1 as dict self.bc.database.get('admissions.Cohort', 1) # get the Cohort with the pk 1 as instance of model self.bc.database.get('admissions.Cohort', 1, dict=False) ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. - pk(`str | int`): primary key of model. - dict(`bool`): if true return dict of values of model else return model instance. \"\"\" model = Database . _get_model ( path ) result = model . objects . filter ( pk = pk ) . first () if dict : result = ModelsMixin . remove_dinamics_fields ( self , result . __dict__ . copy ()) return result list_of ( self , path , dict = True ) This is a wrapper for Model.objects.filter() , get a list of values of models as list[dict] if dict=True else get a list of Model instances. Usage: # get all the Cohort as list of dict self . bc . database . get ( 'admissions.Cohort' ) # get all the Cohort as list of instances of model self . bc . database . get ( 'admissions.Cohort' , dict = False ) Keywords arguments: - path( str ): path to a model, for example admissions.CohortUser . - dict( bool ): if true return dict of values of model else return model instance. Source code in breathecode/tests/mixins/breathecode_mixin/database.py def list_of ( self , path : str , dict : bool = True ) -> list [ Model | dict [ str , Any ]]: \"\"\" This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if `dict=True` else get a list of `Model` instances. Usage: ```py # get all the Cohort as list of dict self.bc.database.get('admissions.Cohort') # get all the Cohort as list of instances of model self.bc.database.get('admissions.Cohort', dict=False) ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. - dict(`bool`): if true return dict of values of model else return model instance. \"\"\" model = Database . _get_model ( path ) result = model . objects . filter () if dict : result = [ ModelsMixin . remove_dinamics_fields ( self , data . __dict__ . copy ()) for data in result ] return result","title":"bc.database"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database","text":"Mixin with the purpose of cover all the related with the database Source code in breathecode/tests/mixins/breathecode_mixin/database.py class Database : \"\"\"Mixin with the purpose of cover all the related with the database\"\"\" _cache : dict [ str , Model ] = {} _parent : APITestCase def __init__ ( self , parent ) -> None : self . _parent = parent @classmethod def _get_model ( cls , path : str ) -> Model : \"\"\"Get model class\"\"\" if path in cls . _cache : return cls . _cache [ path ] app_label , model_name = path . split ( '.' ) cls . _cache [ path ] = apps . get_model ( app_label , model_name ) return cls . _cache [ path ] def list_of ( self , path : str , dict : bool = True ) -> list [ Model | dict [ str , Any ]]: \"\"\" This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if `dict=True` else get a list of `Model` instances. Usage: ```py # get all the Cohort as list of dict self.bc.database.get('admissions.Cohort') # get all the Cohort as list of instances of model self.bc.database.get('admissions.Cohort', dict=False) ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. - dict(`bool`): if true return dict of values of model else return model instance. \"\"\" model = Database . _get_model ( path ) result = model . objects . filter () if dict : result = [ ModelsMixin . remove_dinamics_fields ( self , data . __dict__ . copy ()) for data in result ] return result def delete ( self , path : str , pk : Optional [ int or str ] = None ) -> tuple [ int , dict [ str , int ]]: \"\"\" This is a wrapper for `Model.objects.filter(pk=pk).delete()`, delete a element if `pk` is provided else all the entries. Usage: ```py # create 19110911 cohorts \ud83e\uddbe self.bc.database.create(cohort=19110911) # exists 19110911 cohorts \ud83e\uddbe self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110911) # remove all the cohorts self.bc.database.delete(10) # exists 19110910 cohorts self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110910) ``` # remove all the cohorts self.bc.database.delete() # exists 0 cohorts self.assertEqual(self.bc.database.count('admissions.Cohort'), 0) ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. - pk(`str | int`): primary key of model. \"\"\" lookups = { 'pk' : pk } if pk else {} model = Database . _get_model ( path ) return model . objects . filter ( ** lookups ) . delete () def get ( self , path : str , pk : int or str , dict : bool = True ) -> Model | dict [ str , Any ]: \"\"\" This is a wrapper for `Model.objects.filter(pk=pk).first()`, get the values of model as `dict` if `dict=True` else get the `Model` instance. Usage: ```py # get the Cohort with the pk 1 as dict self.bc.database.get('admissions.Cohort', 1) # get the Cohort with the pk 1 as instance of model self.bc.database.get('admissions.Cohort', 1, dict=False) ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. - pk(`str | int`): primary key of model. - dict(`bool`): if true return dict of values of model else return model instance. \"\"\" model = Database . _get_model ( path ) result = model . objects . filter ( pk = pk ) . first () if dict : result = ModelsMixin . remove_dinamics_fields ( self , result . __dict__ . copy ()) return result def count ( self , path : str ) -> int : \"\"\" This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved. Usage: ```py self.bc.database.count('admissions.Cohort') ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. \"\"\" model = Database . _get_model ( path ) return model . objects . count () def create ( self , * args , ** kwargs ) -> dict [ str , Model | list [ Model ]]: \"\"\" Create one o many instances of models and return it like a dict of models. Usage: ```py # create three users self.bc.database.create(user=3) # create one user with a specific first name user = {'first_name': 'Lacey'} self.bc.database.create(user=user) # create two users with a specific first name and last name users = [ {'first_name': 'Lacey', 'last_name': 'Sturm'}, {'first_name': 'The', 'last_name': 'Warning'}, ] self.bc.database.create(user=users) # create two users with the same first name user = {'first_name': 'Lacey'} self.bc.database.create(user=(2, user)) # setting up manually the relationships cohort_user = {'cohort_id': 2} self.bc.database.create(cohort=2, cohort_user=cohort_user) ``` It get the model name as snake case, you can pass a `bool`, `int`, `dict`, `tuple`, `list[dict]` or `list[tuple]`. Behavior for type of argument: - `bool`: if it is true generate a instance of a model. - `int`: generate a instance of a model n times, if `n` > 1 this is a list. - `dict`: generate a instance of a model, this pass to mixer.blend custom values to the model. - `tuple`: one element need to be a int and the other be a dict, generate a instance of a model n times, if `n` > 1 this is a list, this pass to mixer.blend custom values to the model. - `list[dict]`: generate a instance of a model n times, if `n` > 1 this is a list, this pass to mixer.blend custom values to the model. - `list[tuple]`: generate a instance of a model n times, if `n` > 1 this is a list for each element, this pass to mixer.blend custom values to the model. Keywords arguments deprecated: - models: this arguments is use to implement inheritance, receive as argument the output of other `self.bc.database.create()` execution. - authenticate: create a user and use `APITestCase.client.force_authenticate(user=models['user'])` to get credentials. \"\"\" return GenerateModelsMixin . generate_models ( self . _parent , _new_implementation = True , * args , ** kwargs )","title":"Database"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.count","text":"This is a wrapper for Model.objects.count() , get how many instances of this Model are saved. Usage: self . bc . database . count ( 'admissions.Cohort' ) Keywords arguments: - path( str ): path to a model, for example admissions.CohortUser . Source code in breathecode/tests/mixins/breathecode_mixin/database.py def count ( self , path : str ) -> int : \"\"\" This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved. Usage: ```py self.bc.database.count('admissions.Cohort') ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. \"\"\" model = Database . _get_model ( path ) return model . objects . count ()","title":"count()"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.create","text":"Create one o many instances of models and return it like a dict of models. Usage: # create three users self . bc . database . create ( user = 3 ) # create one user with a specific first name user = { 'first_name' : 'Lacey' } self . bc . database . create ( user = user ) # create two users with a specific first name and last name users = [ { 'first_name' : 'Lacey' , 'last_name' : 'Sturm' }, { 'first_name' : 'The' , 'last_name' : 'Warning' }, ] self . bc . database . create ( user = users ) # create two users with the same first name user = { 'first_name' : 'Lacey' } self . bc . database . create ( user = ( 2 , user )) # setting up manually the relationships cohort_user = { 'cohort_id' : 2 } self . bc . database . create ( cohort = 2 , cohort_user = cohort_user ) It get the model name as snake case, you can pass a bool , int , dict , tuple , list[dict] or list[tuple] . Behavior for type of argument: bool : if it is true generate a instance of a model. int : generate a instance of a model n times, if n > 1 this is a list. dict : generate a instance of a model, this pass to mixer.blend custom values to the model. tuple : one element need to be a int and the other be a dict, generate a instance of a model n times, if n > 1 this is a list, this pass to mixer.blend custom values to the model. list[dict] : generate a instance of a model n times, if n > 1 this is a list, this pass to mixer.blend custom values to the model. list[tuple] : generate a instance of a model n times, if n > 1 this is a list for each element, this pass to mixer.blend custom values to the model. Keywords arguments deprecated: - models: this arguments is use to implement inheritance, receive as argument the output of other self.bc.database.create() execution. - authenticate: create a user and use APITestCase.client.force_authenticate(user=models['user']) to get credentials. Source code in breathecode/tests/mixins/breathecode_mixin/database.py def create ( self , * args , ** kwargs ) -> dict [ str , Model | list [ Model ]]: \"\"\" Create one o many instances of models and return it like a dict of models. Usage: ```py # create three users self.bc.database.create(user=3) # create one user with a specific first name user = {'first_name': 'Lacey'} self.bc.database.create(user=user) # create two users with a specific first name and last name users = [ {'first_name': 'Lacey', 'last_name': 'Sturm'}, {'first_name': 'The', 'last_name': 'Warning'}, ] self.bc.database.create(user=users) # create two users with the same first name user = {'first_name': 'Lacey'} self.bc.database.create(user=(2, user)) # setting up manually the relationships cohort_user = {'cohort_id': 2} self.bc.database.create(cohort=2, cohort_user=cohort_user) ``` It get the model name as snake case, you can pass a `bool`, `int`, `dict`, `tuple`, `list[dict]` or `list[tuple]`. Behavior for type of argument: - `bool`: if it is true generate a instance of a model. - `int`: generate a instance of a model n times, if `n` > 1 this is a list. - `dict`: generate a instance of a model, this pass to mixer.blend custom values to the model. - `tuple`: one element need to be a int and the other be a dict, generate a instance of a model n times, if `n` > 1 this is a list, this pass to mixer.blend custom values to the model. - `list[dict]`: generate a instance of a model n times, if `n` > 1 this is a list, this pass to mixer.blend custom values to the model. - `list[tuple]`: generate a instance of a model n times, if `n` > 1 this is a list for each element, this pass to mixer.blend custom values to the model. Keywords arguments deprecated: - models: this arguments is use to implement inheritance, receive as argument the output of other `self.bc.database.create()` execution. - authenticate: create a user and use `APITestCase.client.force_authenticate(user=models['user'])` to get credentials. \"\"\" return GenerateModelsMixin . generate_models ( self . _parent , _new_implementation = True , * args , ** kwargs )","title":"create()"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.delete","text":"This is a wrapper for Model.objects.filter(pk=pk).delete() , delete a element if pk is provided else all the entries. Usage: # create 19110911 cohorts \ud83e\uddbe self . bc . database . create ( cohort = 19110911 ) # exists 19110911 cohorts \ud83e\uddbe self . assertEqual ( self . bc . database . count ( 'admissions.Cohort' ), 19110911 ) # remove all the cohorts self . bc . database . delete ( 10 ) # exists 19110910 cohorts self . assertEqual ( self . bc . database . count ( 'admissions.Cohort' ), 19110910 )","title":"delete()"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.delete--remove-all-the-cohorts","text":"self.bc.database.delete()","title":"remove all the cohorts"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.delete--exists-0-cohorts","text":"self.assertEqual(self.bc.database.count('admissions.Cohort'), 0) ``` Keywords arguments: - path( str ): path to a model, for example admissions.CohortUser . - pk( str | int ): primary key of model. Source code in breathecode/tests/mixins/breathecode_mixin/database.py def delete ( self , path : str , pk : Optional [ int or str ] = None ) -> tuple [ int , dict [ str , int ]]: \"\"\" This is a wrapper for `Model.objects.filter(pk=pk).delete()`, delete a element if `pk` is provided else all the entries. Usage: ```py # create 19110911 cohorts \ud83e\uddbe self.bc.database.create(cohort=19110911) # exists 19110911 cohorts \ud83e\uddbe self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110911) # remove all the cohorts self.bc.database.delete(10) # exists 19110910 cohorts self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110910) ``` # remove all the cohorts self.bc.database.delete() # exists 0 cohorts self.assertEqual(self.bc.database.count('admissions.Cohort'), 0) ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. - pk(`str | int`): primary key of model. \"\"\" lookups = { 'pk' : pk } if pk else {} model = Database . _get_model ( path ) return model . objects . filter ( ** lookups ) . delete ()","title":"exists 0 cohorts"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.get","text":"This is a wrapper for Model.objects.filter(pk=pk).first() , get the values of model as dict if dict=True else get the Model instance. Usage: # get the Cohort with the pk 1 as dict self . bc . database . get ( 'admissions.Cohort' , 1 ) # get the Cohort with the pk 1 as instance of model self . bc . database . get ( 'admissions.Cohort' , 1 , dict = False ) Keywords arguments: - path( str ): path to a model, for example admissions.CohortUser . - pk( str | int ): primary key of model. - dict( bool ): if true return dict of values of model else return model instance. Source code in breathecode/tests/mixins/breathecode_mixin/database.py def get ( self , path : str , pk : int or str , dict : bool = True ) -> Model | dict [ str , Any ]: \"\"\" This is a wrapper for `Model.objects.filter(pk=pk).first()`, get the values of model as `dict` if `dict=True` else get the `Model` instance. Usage: ```py # get the Cohort with the pk 1 as dict self.bc.database.get('admissions.Cohort', 1) # get the Cohort with the pk 1 as instance of model self.bc.database.get('admissions.Cohort', 1, dict=False) ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. - pk(`str | int`): primary key of model. - dict(`bool`): if true return dict of values of model else return model instance. \"\"\" model = Database . _get_model ( path ) result = model . objects . filter ( pk = pk ) . first () if dict : result = ModelsMixin . remove_dinamics_fields ( self , result . __dict__ . copy ()) return result","title":"get()"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.list_of","text":"This is a wrapper for Model.objects.filter() , get a list of values of models as list[dict] if dict=True else get a list of Model instances. Usage: # get all the Cohort as list of dict self . bc . database . get ( 'admissions.Cohort' ) # get all the Cohort as list of instances of model self . bc . database . get ( 'admissions.Cohort' , dict = False ) Keywords arguments: - path( str ): path to a model, for example admissions.CohortUser . - dict( bool ): if true return dict of values of model else return model instance. Source code in breathecode/tests/mixins/breathecode_mixin/database.py def list_of ( self , path : str , dict : bool = True ) -> list [ Model | dict [ str , Any ]]: \"\"\" This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if `dict=True` else get a list of `Model` instances. Usage: ```py # get all the Cohort as list of dict self.bc.database.get('admissions.Cohort') # get all the Cohort as list of instances of model self.bc.database.get('admissions.Cohort', dict=False) ``` Keywords arguments: - path(`str`): path to a model, for example `admissions.CohortUser`. - dict(`bool`): if true return dict of values of model else return model instance. \"\"\" model = Database . _get_model ( path ) result = model . objects . filter () if dict : result = [ ModelsMixin . remove_dinamics_fields ( self , data . __dict__ . copy ()) for data in result ] return result","title":"list_of()"},{"location":"testing/mixins/bc-datetime/","text":"Datetime Mixin with the purpose of cover all the related with datetime Source code in breathecode/tests/mixins/breathecode_mixin/datetime.py class Datetime : \"\"\"Mixin with the purpose of cover all the related with datetime\"\"\" to_iso_string = DatetimeMixin . datetime_to_iso from_iso_string = DatetimeMixin . iso_to_datetime now = DatetimeMixin . datetime_now _parent : APITestCase def __init__ ( self , parent ) -> None : self . _parent = parent def from_timedelta ( self , delta = timedelta ( seconds = 0 )) -> str : \"\"\" Transform from timedelta to the totals seconds in str. Usage: ```py from datetime import timedelta delta = timedelta(seconds=777) self.bc.datetime.from_timedelta(delta) # equals to '777.0' ``` \"\"\" return str ( delta . total_seconds ()) from_iso_string ( self , iso ) Transform a ISO 8601 format to datetime. Usage: utc_now = timezone . now () # equals to datetime.datetime(2022, 3, 21, 2, 51, 55, 068) self . bc . datetime . from_iso_string ( '2022-03-21T07:51:55.068Z' ) Source code in breathecode/tests/mixins/breathecode_mixin/datetime.py def iso_to_datetime ( self , iso : str ) -> datetime : \"\"\" Transform a ISO 8601 format to datetime. Usage: ```py utc_now = timezone.now() # equals to datetime.datetime(2022, 3, 21, 2, 51, 55, 068) self.bc.datetime.from_iso_string('2022-03-21T07:51:55.068Z') ``` \"\"\" string = re . sub ( r 'Z$' , '' , iso ) date = datetime . fromisoformat ( string ) return timezone . make_aware ( date ) from_timedelta ( self , delta = datetime . timedelta ( 0 )) Transform from timedelta to the totals seconds in str. Usage: from datetime import timedelta delta = timedelta ( seconds = 777 ) self . bc . datetime . from_timedelta ( delta ) # equals to '777.0' Source code in breathecode/tests/mixins/breathecode_mixin/datetime.py def from_timedelta ( self , delta = timedelta ( seconds = 0 )) -> str : \"\"\" Transform from timedelta to the totals seconds in str. Usage: ```py from datetime import timedelta delta = timedelta(seconds=777) self.bc.datetime.from_timedelta(delta) # equals to '777.0' ``` \"\"\" return str ( delta . total_seconds ()) now ( self ) Get a datetime from now with the timezone info. Usage: self . bc . datetime . now () # equals to '2022-03-21T07:51:55.068Z' Source code in breathecode/tests/mixins/breathecode_mixin/datetime.py def datetime_now ( self ) -> datetime : \"\"\" Get a datetime from now with the timezone info. Usage: ```py self.bc.datetime.now() # equals to '2022-03-21T07:51:55.068Z' ``` \"\"\" return timezone . now () to_iso_string ( self , date = datetime . datetime ( 2022 , 5 , 25 , 1 , 11 , 24 , 11324 )) Transform a datetime to ISO 8601 format. Usage: utc_now = timezone . now () self . bc . datetime . to_iso_string ( utc_now ) # equals to '2022-03-21T07:51:55.068Z' Source code in breathecode/tests/mixins/breathecode_mixin/datetime.py def datetime_to_iso ( self , date = datetime . utcnow ()) -> str : \"\"\" Transform a datetime to ISO 8601 format. Usage: ```py utc_now = timezone.now() self.bc.datetime.to_iso_string(utc_now) # equals to '2022-03-21T07:51:55.068Z' ``` \"\"\" return re . sub ( r '\\+00:00$' , 'Z' , date . replace ( tzinfo = UTC ) . isoformat ())","title":"bc.datetime"},{"location":"testing/mixins/bc-datetime/#breathecode.tests.mixins.breathecode_mixin.datetime.Datetime","text":"Mixin with the purpose of cover all the related with datetime Source code in breathecode/tests/mixins/breathecode_mixin/datetime.py class Datetime : \"\"\"Mixin with the purpose of cover all the related with datetime\"\"\" to_iso_string = DatetimeMixin . datetime_to_iso from_iso_string = DatetimeMixin . iso_to_datetime now = DatetimeMixin . datetime_now _parent : APITestCase def __init__ ( self , parent ) -> None : self . _parent = parent def from_timedelta ( self , delta = timedelta ( seconds = 0 )) -> str : \"\"\" Transform from timedelta to the totals seconds in str. Usage: ```py from datetime import timedelta delta = timedelta(seconds=777) self.bc.datetime.from_timedelta(delta) # equals to '777.0' ``` \"\"\" return str ( delta . total_seconds ())","title":"Datetime"},{"location":"testing/mixins/bc-datetime/#breathecode.tests.mixins.breathecode_mixin.datetime.Datetime.from_iso_string","text":"Transform a ISO 8601 format to datetime. Usage: utc_now = timezone . now () # equals to datetime.datetime(2022, 3, 21, 2, 51, 55, 068) self . bc . datetime . from_iso_string ( '2022-03-21T07:51:55.068Z' ) Source code in breathecode/tests/mixins/breathecode_mixin/datetime.py def iso_to_datetime ( self , iso : str ) -> datetime : \"\"\" Transform a ISO 8601 format to datetime. Usage: ```py utc_now = timezone.now() # equals to datetime.datetime(2022, 3, 21, 2, 51, 55, 068) self.bc.datetime.from_iso_string('2022-03-21T07:51:55.068Z') ``` \"\"\" string = re . sub ( r 'Z$' , '' , iso ) date = datetime . fromisoformat ( string ) return timezone . make_aware ( date )","title":"from_iso_string()"},{"location":"testing/mixins/bc-datetime/#breathecode.tests.mixins.breathecode_mixin.datetime.Datetime.from_timedelta","text":"Transform from timedelta to the totals seconds in str. Usage: from datetime import timedelta delta = timedelta ( seconds = 777 ) self . bc . datetime . from_timedelta ( delta ) # equals to '777.0' Source code in breathecode/tests/mixins/breathecode_mixin/datetime.py def from_timedelta ( self , delta = timedelta ( seconds = 0 )) -> str : \"\"\" Transform from timedelta to the totals seconds in str. Usage: ```py from datetime import timedelta delta = timedelta(seconds=777) self.bc.datetime.from_timedelta(delta) # equals to '777.0' ``` \"\"\" return str ( delta . total_seconds ())","title":"from_timedelta()"},{"location":"testing/mixins/bc-datetime/#breathecode.tests.mixins.breathecode_mixin.datetime.Datetime.now","text":"Get a datetime from now with the timezone info. Usage: self . bc . datetime . now () # equals to '2022-03-21T07:51:55.068Z' Source code in breathecode/tests/mixins/breathecode_mixin/datetime.py def datetime_now ( self ) -> datetime : \"\"\" Get a datetime from now with the timezone info. Usage: ```py self.bc.datetime.now() # equals to '2022-03-21T07:51:55.068Z' ``` \"\"\" return timezone . now ()","title":"now()"},{"location":"testing/mixins/bc-datetime/#breathecode.tests.mixins.breathecode_mixin.datetime.Datetime.to_iso_string","text":"Transform a datetime to ISO 8601 format. Usage: utc_now = timezone . now () self . bc . datetime . to_iso_string ( utc_now ) # equals to '2022-03-21T07:51:55.068Z' Source code in breathecode/tests/mixins/breathecode_mixin/datetime.py def datetime_to_iso ( self , date = datetime . utcnow ()) -> str : \"\"\" Transform a datetime to ISO 8601 format. Usage: ```py utc_now = timezone.now() self.bc.datetime.to_iso_string(utc_now) # equals to '2022-03-21T07:51:55.068Z' ``` \"\"\" return re . sub ( r '\\+00:00$' , 'Z' , date . replace ( tzinfo = UTC ) . isoformat ())","title":"to_iso_string()"},{"location":"testing/mixins/bc-format/","text":"Format Mixin with the purpose of cover all the related with format or parse something Source code in breathecode/tests/mixins/breathecode_mixin/format.py class Format : \"\"\"Mixin with the purpose of cover all the related with format or parse something\"\"\" _parent : APITestCase ENCODE = ENCODE def __init__ ( self , parent ) -> None : self . _parent = parent def table ( self , arg : QuerySet ) -> dict [ str , Any ] | list [ dict [ str , Any ]]: \"\"\" Convert a QuerySet in a list. Usage: ```py model = self.bc.database.create(user=1, group=1) self.bc.format.model(model.user.groups.all()) # = [{...}] ``` \"\"\" return [ ModelsMixin . remove_dinamics_fields ( self , data . __dict__ . copy ()) for data in arg ] def to_dict ( self , arg : Any ) -> dict [ str , Any ] | list [ dict [ str , Any ]]: \"\"\" Parse the object to a `dict` or `list[dict]`. Usage: ```py # setup the database, model.user is instance of dict and model.cohort # is instance list of dicts model = self.bc.database.create(user=1, cohort=2) # Parsing one model to a dict self.bc.format.to_dict(model.user) # = {...} # Parsing many models to a list of dict (infered from the type of # argument) self.bc.format.to_dict(model.cohort) # = [{...}, {...}] ``` \"\"\" if isinstance ( arg , list ) or isinstance ( arg , QuerySet ): return [ self . _one_to_dict ( x ) for x in arg ] return self . _one_to_dict ( arg ) def _one_to_dict ( self , arg ) -> dict [ str , Any ]: \"\"\"Parse the object to a `dict`\"\"\" if isinstance ( arg , Model ): return ModelsMixin . remove_dinamics_fields ( None , vars ( arg )) if isinstance ( arg , dict ): return arg raise NotImplementedError ( f ' { arg . __name__ } is not implemented yet' ) def describe_models ( self , models : dict [ str , Model ]) -> str : \"\"\" Describe the models. Usage: ```py # setup the database model = self.bc.database.create(user=1, cohort=1) # print the docstring to the corresponding test self.bc.format.describe_models(model) ``` \"\"\" title_spaces = ' ' * 8 model_spaces = ' ' * 10 result = {} for key in models : model = models [ key ] if isinstance ( model , list ): for v in model : name , obj = self . _describe_model ( v ) result [ name ] = obj else : name , obj = self . _describe_model ( model ) result [ name ] = obj print ( title_spaces + 'Descriptions of models are being generated:' ) for line in yaml . dump ( result ) . split ( ' \\n ' ): if not line . startswith ( ' ' ): print () print ( model_spaces + line ) # This make sure the element are being printed and prevent `describe_models` are pushed to dev branch assert False #TODO: this method is buggy in the line `if not hasattr(model, key)` def _describe_model ( self , model : Model ): pk_name = self . _get_pk_name ( model ) attrs = dir ( model ) result = {} for key in attrs : if key . startswith ( '_' ): continue if key == 'DoesNotExist' : continue if key == 'MultipleObjectsReturned' : continue if key . startswith ( 'get_next_' ): continue if key . startswith ( 'get_previous_' ): continue if key . endswith ( '_set' ): continue if not hasattr ( model , key ): continue attr = getattr ( model , key ) if attr . __class__ . __name__ == 'method' : continue if isinstance ( attr , Model ): result [ key ] = f ' { attr . __class__ . __name__ } ( { self . _get_pk_name ( attr ) } = { self . _repr_pk ( attr . pk ) } )' elif attr . __class__ . __name__ == 'ManyRelatedManager' : instances = [ f ' { attr . model . __name__ } ( { self . _get_pk_name ( x ) } = { self . _repr_pk ( x . pk ) } )' for x in attr . get_queryset () ] result [ key ] = instances return ( f ' { model . __class__ . __name__ } ( { pk_name } = { self . _repr_pk ( model . pk ) } )' , result ) def _repr_pk ( self , pk : str | int ) -> int | str : if isinstance ( pk , int ): return pk return f '\" { pk } \"' def _get_pk_name ( self , model : Model ): from django.db.models.fields import Field , SlugField attrs = [ x for x in dir ( model ) if hasattr ( model . __class__ , x ) and ( isinstance ( getattr ( model . __class__ , x ), SlugField ) or isinstance ( getattr ( model . __class__ , x ), SlugField )) and getattr ( model . __class__ , x ) . primary_key ] for key in dir ( model ): if ( hasattr ( model . __class__ , key ) and hasattr ( getattr ( model . __class__ , key ), 'field' ) and getattr ( model . __class__ , key ) . field . primary_key ): return key return 'pk' def from_base64 ( self , hash : str | bytes ) -> str : \"\"\" Transform a base64 hash to string. \"\"\" if isinstance ( hash , str ): hash = hash . encode () return base64 . b64decode ( hash ) . decode ( ENCODE ) def to_base64 ( self , string : str | bytes ) -> str : \"\"\" Transform a base64 hash to string. \"\"\" if isinstance ( string , str ): string = string . encode () return base64 . b64encode ( string ) . decode ( ENCODE ) def to_querystring ( self , params : dict ) -> str : \"\"\" Transform dict to querystring \"\"\" return urllib . parse . urlencode ( params ) def from_bytes ( self , s : bytes , encode : str = ENCODE ) -> str : \"\"\" Transform bytes to a string. \"\"\" return s . decode ( encode ) describe_models ( self , models ) Describe the models. Usage: # setup the database model = self . bc . database . create ( user = 1 , cohort = 1 ) # print the docstring to the corresponding test self . bc . format . describe_models ( model ) Source code in breathecode/tests/mixins/breathecode_mixin/format.py def describe_models ( self , models : dict [ str , Model ]) -> str : \"\"\" Describe the models. Usage: ```py # setup the database model = self.bc.database.create(user=1, cohort=1) # print the docstring to the corresponding test self.bc.format.describe_models(model) ``` \"\"\" title_spaces = ' ' * 8 model_spaces = ' ' * 10 result = {} for key in models : model = models [ key ] if isinstance ( model , list ): for v in model : name , obj = self . _describe_model ( v ) result [ name ] = obj else : name , obj = self . _describe_model ( model ) result [ name ] = obj print ( title_spaces + 'Descriptions of models are being generated:' ) for line in yaml . dump ( result ) . split ( ' \\n ' ): if not line . startswith ( ' ' ): print () print ( model_spaces + line ) # This make sure the element are being printed and prevent `describe_models` are pushed to dev branch assert False from_base64 ( self , hash ) Transform a base64 hash to string. Source code in breathecode/tests/mixins/breathecode_mixin/format.py def from_base64 ( self , hash : str | bytes ) -> str : \"\"\" Transform a base64 hash to string. \"\"\" if isinstance ( hash , str ): hash = hash . encode () return base64 . b64decode ( hash ) . decode ( ENCODE ) from_bytes ( self , s , encode = 'utf-8' ) Transform bytes to a string. Source code in breathecode/tests/mixins/breathecode_mixin/format.py def from_bytes ( self , s : bytes , encode : str = ENCODE ) -> str : \"\"\" Transform bytes to a string. \"\"\" return s . decode ( encode ) table ( self , arg ) Convert a QuerySet in a list. Usage: model = self . bc . database . create ( user = 1 , group = 1 ) self . bc . format . model ( model . user . groups . all ()) # = [{...}] Source code in breathecode/tests/mixins/breathecode_mixin/format.py def table ( self , arg : QuerySet ) -> dict [ str , Any ] | list [ dict [ str , Any ]]: \"\"\" Convert a QuerySet in a list. Usage: ```py model = self.bc.database.create(user=1, group=1) self.bc.format.model(model.user.groups.all()) # = [{...}] ``` \"\"\" return [ ModelsMixin . remove_dinamics_fields ( self , data . __dict__ . copy ()) for data in arg ] to_base64 ( self , string ) Transform a base64 hash to string. Source code in breathecode/tests/mixins/breathecode_mixin/format.py def to_base64 ( self , string : str | bytes ) -> str : \"\"\" Transform a base64 hash to string. \"\"\" if isinstance ( string , str ): string = string . encode () return base64 . b64encode ( string ) . decode ( ENCODE ) to_dict ( self , arg ) Parse the object to a dict or list[dict] . Usage: # setup the database, model.user is instance of dict and model.cohort # is instance list of dicts model = self . bc . database . create ( user = 1 , cohort = 2 ) # Parsing one model to a dict self . bc . format . to_dict ( model . user ) # = {...} # Parsing many models to a list of dict (infered from the type of # argument) self . bc . format . to_dict ( model . cohort ) # = [{...}, {...}] Source code in breathecode/tests/mixins/breathecode_mixin/format.py def to_dict ( self , arg : Any ) -> dict [ str , Any ] | list [ dict [ str , Any ]]: \"\"\" Parse the object to a `dict` or `list[dict]`. Usage: ```py # setup the database, model.user is instance of dict and model.cohort # is instance list of dicts model = self.bc.database.create(user=1, cohort=2) # Parsing one model to a dict self.bc.format.to_dict(model.user) # = {...} # Parsing many models to a list of dict (infered from the type of # argument) self.bc.format.to_dict(model.cohort) # = [{...}, {...}] ``` \"\"\" if isinstance ( arg , list ) or isinstance ( arg , QuerySet ): return [ self . _one_to_dict ( x ) for x in arg ] return self . _one_to_dict ( arg ) to_querystring ( self , params ) Transform dict to querystring Source code in breathecode/tests/mixins/breathecode_mixin/format.py def to_querystring ( self , params : dict ) -> str : \"\"\" Transform dict to querystring \"\"\" return urllib . parse . urlencode ( params )","title":"bc.format"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format","text":"Mixin with the purpose of cover all the related with format or parse something Source code in breathecode/tests/mixins/breathecode_mixin/format.py class Format : \"\"\"Mixin with the purpose of cover all the related with format or parse something\"\"\" _parent : APITestCase ENCODE = ENCODE def __init__ ( self , parent ) -> None : self . _parent = parent def table ( self , arg : QuerySet ) -> dict [ str , Any ] | list [ dict [ str , Any ]]: \"\"\" Convert a QuerySet in a list. Usage: ```py model = self.bc.database.create(user=1, group=1) self.bc.format.model(model.user.groups.all()) # = [{...}] ``` \"\"\" return [ ModelsMixin . remove_dinamics_fields ( self , data . __dict__ . copy ()) for data in arg ] def to_dict ( self , arg : Any ) -> dict [ str , Any ] | list [ dict [ str , Any ]]: \"\"\" Parse the object to a `dict` or `list[dict]`. Usage: ```py # setup the database, model.user is instance of dict and model.cohort # is instance list of dicts model = self.bc.database.create(user=1, cohort=2) # Parsing one model to a dict self.bc.format.to_dict(model.user) # = {...} # Parsing many models to a list of dict (infered from the type of # argument) self.bc.format.to_dict(model.cohort) # = [{...}, {...}] ``` \"\"\" if isinstance ( arg , list ) or isinstance ( arg , QuerySet ): return [ self . _one_to_dict ( x ) for x in arg ] return self . _one_to_dict ( arg ) def _one_to_dict ( self , arg ) -> dict [ str , Any ]: \"\"\"Parse the object to a `dict`\"\"\" if isinstance ( arg , Model ): return ModelsMixin . remove_dinamics_fields ( None , vars ( arg )) if isinstance ( arg , dict ): return arg raise NotImplementedError ( f ' { arg . __name__ } is not implemented yet' ) def describe_models ( self , models : dict [ str , Model ]) -> str : \"\"\" Describe the models. Usage: ```py # setup the database model = self.bc.database.create(user=1, cohort=1) # print the docstring to the corresponding test self.bc.format.describe_models(model) ``` \"\"\" title_spaces = ' ' * 8 model_spaces = ' ' * 10 result = {} for key in models : model = models [ key ] if isinstance ( model , list ): for v in model : name , obj = self . _describe_model ( v ) result [ name ] = obj else : name , obj = self . _describe_model ( model ) result [ name ] = obj print ( title_spaces + 'Descriptions of models are being generated:' ) for line in yaml . dump ( result ) . split ( ' \\n ' ): if not line . startswith ( ' ' ): print () print ( model_spaces + line ) # This make sure the element are being printed and prevent `describe_models` are pushed to dev branch assert False #TODO: this method is buggy in the line `if not hasattr(model, key)` def _describe_model ( self , model : Model ): pk_name = self . _get_pk_name ( model ) attrs = dir ( model ) result = {} for key in attrs : if key . startswith ( '_' ): continue if key == 'DoesNotExist' : continue if key == 'MultipleObjectsReturned' : continue if key . startswith ( 'get_next_' ): continue if key . startswith ( 'get_previous_' ): continue if key . endswith ( '_set' ): continue if not hasattr ( model , key ): continue attr = getattr ( model , key ) if attr . __class__ . __name__ == 'method' : continue if isinstance ( attr , Model ): result [ key ] = f ' { attr . __class__ . __name__ } ( { self . _get_pk_name ( attr ) } = { self . _repr_pk ( attr . pk ) } )' elif attr . __class__ . __name__ == 'ManyRelatedManager' : instances = [ f ' { attr . model . __name__ } ( { self . _get_pk_name ( x ) } = { self . _repr_pk ( x . pk ) } )' for x in attr . get_queryset () ] result [ key ] = instances return ( f ' { model . __class__ . __name__ } ( { pk_name } = { self . _repr_pk ( model . pk ) } )' , result ) def _repr_pk ( self , pk : str | int ) -> int | str : if isinstance ( pk , int ): return pk return f '\" { pk } \"' def _get_pk_name ( self , model : Model ): from django.db.models.fields import Field , SlugField attrs = [ x for x in dir ( model ) if hasattr ( model . __class__ , x ) and ( isinstance ( getattr ( model . __class__ , x ), SlugField ) or isinstance ( getattr ( model . __class__ , x ), SlugField )) and getattr ( model . __class__ , x ) . primary_key ] for key in dir ( model ): if ( hasattr ( model . __class__ , key ) and hasattr ( getattr ( model . __class__ , key ), 'field' ) and getattr ( model . __class__ , key ) . field . primary_key ): return key return 'pk' def from_base64 ( self , hash : str | bytes ) -> str : \"\"\" Transform a base64 hash to string. \"\"\" if isinstance ( hash , str ): hash = hash . encode () return base64 . b64decode ( hash ) . decode ( ENCODE ) def to_base64 ( self , string : str | bytes ) -> str : \"\"\" Transform a base64 hash to string. \"\"\" if isinstance ( string , str ): string = string . encode () return base64 . b64encode ( string ) . decode ( ENCODE ) def to_querystring ( self , params : dict ) -> str : \"\"\" Transform dict to querystring \"\"\" return urllib . parse . urlencode ( params ) def from_bytes ( self , s : bytes , encode : str = ENCODE ) -> str : \"\"\" Transform bytes to a string. \"\"\" return s . decode ( encode )","title":"Format"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.describe_models","text":"Describe the models. Usage: # setup the database model = self . bc . database . create ( user = 1 , cohort = 1 ) # print the docstring to the corresponding test self . bc . format . describe_models ( model ) Source code in breathecode/tests/mixins/breathecode_mixin/format.py def describe_models ( self , models : dict [ str , Model ]) -> str : \"\"\" Describe the models. Usage: ```py # setup the database model = self.bc.database.create(user=1, cohort=1) # print the docstring to the corresponding test self.bc.format.describe_models(model) ``` \"\"\" title_spaces = ' ' * 8 model_spaces = ' ' * 10 result = {} for key in models : model = models [ key ] if isinstance ( model , list ): for v in model : name , obj = self . _describe_model ( v ) result [ name ] = obj else : name , obj = self . _describe_model ( model ) result [ name ] = obj print ( title_spaces + 'Descriptions of models are being generated:' ) for line in yaml . dump ( result ) . split ( ' \\n ' ): if not line . startswith ( ' ' ): print () print ( model_spaces + line ) # This make sure the element are being printed and prevent `describe_models` are pushed to dev branch assert False","title":"describe_models()"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.from_base64","text":"Transform a base64 hash to string. Source code in breathecode/tests/mixins/breathecode_mixin/format.py def from_base64 ( self , hash : str | bytes ) -> str : \"\"\" Transform a base64 hash to string. \"\"\" if isinstance ( hash , str ): hash = hash . encode () return base64 . b64decode ( hash ) . decode ( ENCODE )","title":"from_base64()"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.from_bytes","text":"Transform bytes to a string. Source code in breathecode/tests/mixins/breathecode_mixin/format.py def from_bytes ( self , s : bytes , encode : str = ENCODE ) -> str : \"\"\" Transform bytes to a string. \"\"\" return s . decode ( encode )","title":"from_bytes()"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.table","text":"Convert a QuerySet in a list. Usage: model = self . bc . database . create ( user = 1 , group = 1 ) self . bc . format . model ( model . user . groups . all ()) # = [{...}] Source code in breathecode/tests/mixins/breathecode_mixin/format.py def table ( self , arg : QuerySet ) -> dict [ str , Any ] | list [ dict [ str , Any ]]: \"\"\" Convert a QuerySet in a list. Usage: ```py model = self.bc.database.create(user=1, group=1) self.bc.format.model(model.user.groups.all()) # = [{...}] ``` \"\"\" return [ ModelsMixin . remove_dinamics_fields ( self , data . __dict__ . copy ()) for data in arg ]","title":"table()"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.to_base64","text":"Transform a base64 hash to string. Source code in breathecode/tests/mixins/breathecode_mixin/format.py def to_base64 ( self , string : str | bytes ) -> str : \"\"\" Transform a base64 hash to string. \"\"\" if isinstance ( string , str ): string = string . encode () return base64 . b64encode ( string ) . decode ( ENCODE )","title":"to_base64()"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.to_dict","text":"Parse the object to a dict or list[dict] . Usage: # setup the database, model.user is instance of dict and model.cohort # is instance list of dicts model = self . bc . database . create ( user = 1 , cohort = 2 ) # Parsing one model to a dict self . bc . format . to_dict ( model . user ) # = {...} # Parsing many models to a list of dict (infered from the type of # argument) self . bc . format . to_dict ( model . cohort ) # = [{...}, {...}] Source code in breathecode/tests/mixins/breathecode_mixin/format.py def to_dict ( self , arg : Any ) -> dict [ str , Any ] | list [ dict [ str , Any ]]: \"\"\" Parse the object to a `dict` or `list[dict]`. Usage: ```py # setup the database, model.user is instance of dict and model.cohort # is instance list of dicts model = self.bc.database.create(user=1, cohort=2) # Parsing one model to a dict self.bc.format.to_dict(model.user) # = {...} # Parsing many models to a list of dict (infered from the type of # argument) self.bc.format.to_dict(model.cohort) # = [{...}, {...}] ``` \"\"\" if isinstance ( arg , list ) or isinstance ( arg , QuerySet ): return [ self . _one_to_dict ( x ) for x in arg ] return self . _one_to_dict ( arg )","title":"to_dict()"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.to_querystring","text":"Transform dict to querystring Source code in breathecode/tests/mixins/breathecode_mixin/format.py def to_querystring ( self , params : dict ) -> str : \"\"\" Transform dict to querystring \"\"\" return urllib . parse . urlencode ( params )","title":"to_querystring()"},{"location":"testing/mixins/bc-request/","text":"Request Mixin with the purpose of cover all the related with the request Source code in breathecode/tests/mixins/breathecode_mixin/request.py class Request : \"\"\"Mixin with the purpose of cover all the related with the request\"\"\" _parent : APITestCase def set_headers ( self , ** kargs : str ) -> None : \"\"\" Set headers. ```py # It set the headers with: # Academy: 1 # ThingOfImportance: potato self.bc.request.set_headers(academy=1, thing_of_importance='potato') ``` \"\"\" headers = {} items = [ index for index in kargs if kargs [ index ] and ( isinstance ( kargs [ index ], str ) or isinstance ( kargs [ index ], int )) ] for index in items : headers [ f 'HTTP_ { index . upper () } ' ] = str ( kargs [ index ]) self . _parent . client . credentials ( ** headers ) def __init__ ( self , parent ) -> None : self . _parent = parent def authenticate ( self , user : User ) -> None : \"\"\" Forces authentication in a request inside a APITestCase. Usage: ```py # setup the database model = self.bc.database.create(user=1) # that setup the request to use the credential of user passed self.bc.request.authenticate(model.user) ``` Keywords arguments: - user: a instance of user model `breathecode.authenticate.models.User` \"\"\" self . _parent . client . force_authenticate ( user = user ) def manual_authentication ( self , user : User ) -> None : \"\"\" Generate a manual authentication using a token, this method is more slower than `authenticate`. ```py # setup the database model = self.bc.database.create(user=1) # that setup the request to use the credential with tokens of user passed self.bc.request.manual_authentication(model.user) ``` Keywords arguments: - user: a instance of user model `breathecode.authenticate.models.User`. \"\"\" token = Token . objects . create ( user = user ) self . _parent . client . credentials ( HTTP_AUTHORIZATION = f 'Token { token . key } ' ) authenticate ( self , user ) Forces authentication in a request inside a APITestCase. Usage: # setup the database model = self . bc . database . create ( user = 1 ) # that setup the request to use the credential of user passed self . bc . request . authenticate ( model . user ) Keywords arguments: user: a instance of user model breathecode.authenticate.models.User Source code in breathecode/tests/mixins/breathecode_mixin/request.py def authenticate ( self , user : User ) -> None : \"\"\" Forces authentication in a request inside a APITestCase. Usage: ```py # setup the database model = self.bc.database.create(user=1) # that setup the request to use the credential of user passed self.bc.request.authenticate(model.user) ``` Keywords arguments: - user: a instance of user model `breathecode.authenticate.models.User` \"\"\" self . _parent . client . force_authenticate ( user = user ) manual_authentication ( self , user ) Generate a manual authentication using a token, this method is more slower than authenticate . # setup the database model = self . bc . database . create ( user = 1 ) # that setup the request to use the credential with tokens of user passed self . bc . request . manual_authentication ( model . user ) Keywords arguments: user: a instance of user model breathecode.authenticate.models.User . Source code in breathecode/tests/mixins/breathecode_mixin/request.py def manual_authentication ( self , user : User ) -> None : \"\"\" Generate a manual authentication using a token, this method is more slower than `authenticate`. ```py # setup the database model = self.bc.database.create(user=1) # that setup the request to use the credential with tokens of user passed self.bc.request.manual_authentication(model.user) ``` Keywords arguments: - user: a instance of user model `breathecode.authenticate.models.User`. \"\"\" token = Token . objects . create ( user = user ) self . _parent . client . credentials ( HTTP_AUTHORIZATION = f 'Token { token . key } ' ) set_headers ( self , ** kargs ) Set headers. # It set the headers with: # Academy: 1 # ThingOfImportance: potato self . bc . request . set_headers ( academy = 1 , thing_of_importance = 'potato' ) Source code in breathecode/tests/mixins/breathecode_mixin/request.py def set_headers ( self , ** kargs : str ) -> None : \"\"\" Set headers. ```py # It set the headers with: # Academy: 1 # ThingOfImportance: potato self.bc.request.set_headers(academy=1, thing_of_importance='potato') ``` \"\"\" headers = {} items = [ index for index in kargs if kargs [ index ] and ( isinstance ( kargs [ index ], str ) or isinstance ( kargs [ index ], int )) ] for index in items : headers [ f 'HTTP_ { index . upper () } ' ] = str ( kargs [ index ]) self . _parent . client . credentials ( ** headers )","title":"bc.request"},{"location":"testing/mixins/bc-request/#breathecode.tests.mixins.breathecode_mixin.request.Request","text":"Mixin with the purpose of cover all the related with the request Source code in breathecode/tests/mixins/breathecode_mixin/request.py class Request : \"\"\"Mixin with the purpose of cover all the related with the request\"\"\" _parent : APITestCase def set_headers ( self , ** kargs : str ) -> None : \"\"\" Set headers. ```py # It set the headers with: # Academy: 1 # ThingOfImportance: potato self.bc.request.set_headers(academy=1, thing_of_importance='potato') ``` \"\"\" headers = {} items = [ index for index in kargs if kargs [ index ] and ( isinstance ( kargs [ index ], str ) or isinstance ( kargs [ index ], int )) ] for index in items : headers [ f 'HTTP_ { index . upper () } ' ] = str ( kargs [ index ]) self . _parent . client . credentials ( ** headers ) def __init__ ( self , parent ) -> None : self . _parent = parent def authenticate ( self , user : User ) -> None : \"\"\" Forces authentication in a request inside a APITestCase. Usage: ```py # setup the database model = self.bc.database.create(user=1) # that setup the request to use the credential of user passed self.bc.request.authenticate(model.user) ``` Keywords arguments: - user: a instance of user model `breathecode.authenticate.models.User` \"\"\" self . _parent . client . force_authenticate ( user = user ) def manual_authentication ( self , user : User ) -> None : \"\"\" Generate a manual authentication using a token, this method is more slower than `authenticate`. ```py # setup the database model = self.bc.database.create(user=1) # that setup the request to use the credential with tokens of user passed self.bc.request.manual_authentication(model.user) ``` Keywords arguments: - user: a instance of user model `breathecode.authenticate.models.User`. \"\"\" token = Token . objects . create ( user = user ) self . _parent . client . credentials ( HTTP_AUTHORIZATION = f 'Token { token . key } ' )","title":"Request"},{"location":"testing/mixins/bc-request/#breathecode.tests.mixins.breathecode_mixin.request.Request.authenticate","text":"Forces authentication in a request inside a APITestCase. Usage: # setup the database model = self . bc . database . create ( user = 1 ) # that setup the request to use the credential of user passed self . bc . request . authenticate ( model . user ) Keywords arguments: user: a instance of user model breathecode.authenticate.models.User Source code in breathecode/tests/mixins/breathecode_mixin/request.py def authenticate ( self , user : User ) -> None : \"\"\" Forces authentication in a request inside a APITestCase. Usage: ```py # setup the database model = self.bc.database.create(user=1) # that setup the request to use the credential of user passed self.bc.request.authenticate(model.user) ``` Keywords arguments: - user: a instance of user model `breathecode.authenticate.models.User` \"\"\" self . _parent . client . force_authenticate ( user = user )","title":"authenticate()"},{"location":"testing/mixins/bc-request/#breathecode.tests.mixins.breathecode_mixin.request.Request.manual_authentication","text":"Generate a manual authentication using a token, this method is more slower than authenticate . # setup the database model = self . bc . database . create ( user = 1 ) # that setup the request to use the credential with tokens of user passed self . bc . request . manual_authentication ( model . user ) Keywords arguments: user: a instance of user model breathecode.authenticate.models.User . Source code in breathecode/tests/mixins/breathecode_mixin/request.py def manual_authentication ( self , user : User ) -> None : \"\"\" Generate a manual authentication using a token, this method is more slower than `authenticate`. ```py # setup the database model = self.bc.database.create(user=1) # that setup the request to use the credential with tokens of user passed self.bc.request.manual_authentication(model.user) ``` Keywords arguments: - user: a instance of user model `breathecode.authenticate.models.User`. \"\"\" token = Token . objects . create ( user = user ) self . _parent . client . credentials ( HTTP_AUTHORIZATION = f 'Token { token . key } ' )","title":"manual_authentication()"},{"location":"testing/mixins/bc-request/#breathecode.tests.mixins.breathecode_mixin.request.Request.set_headers","text":"Set headers. # It set the headers with: # Academy: 1 # ThingOfImportance: potato self . bc . request . set_headers ( academy = 1 , thing_of_importance = 'potato' ) Source code in breathecode/tests/mixins/breathecode_mixin/request.py def set_headers ( self , ** kargs : str ) -> None : \"\"\" Set headers. ```py # It set the headers with: # Academy: 1 # ThingOfImportance: potato self.bc.request.set_headers(academy=1, thing_of_importance='potato') ``` \"\"\" headers = {} items = [ index for index in kargs if kargs [ index ] and ( isinstance ( kargs [ index ], str ) or isinstance ( kargs [ index ], int )) ] for index in items : headers [ f 'HTTP_ { index . upper () } ' ] = str ( kargs [ index ]) self . _parent . client . credentials ( ** headers )","title":"set_headers()"},{"location":"testing/mixins/bc/","text":"bc Breathecode Collection of mixins for testing purposes Source code in breathecode/tests/mixins/breathecode_mixin/breathecode.py class Breathecode : \"\"\"Collection of mixins for testing purposes\"\"\" cache : Cache datetime : Datetime request : Request database : Database check : Check format : Format _parent : APITestCase fake : Faker def __init__ ( self , parent ) -> None : self . _parent = parent self . cache = Cache ( parent ) self . datetime = Datetime ( parent ) self . request = Request ( parent ) self . database = Database ( parent ) self . check = Check ( parent ) self . format = Format ( parent ) self . fake = Faker () def help ( self , * args ) -> None : \"\"\" Print a list of mixin with a tree style (command of Linux). Usage: ```py # this print a tree with all the mixins self.bc.help() # this print just the docs of corresponding method self.bc.help('bc.datetime.now') ``` \"\"\" if args : for arg in args : self . _get_doctring ( arg ) else : self . _help_tree () # prevent left a `self.bc.help()` in the code assert False def _get_doctring ( self , path : str ) -> None : parts_of_path = path . split ( '.' ) current_path = '' current = None for part_of_path in parts_of_path : if not current : if not hasattr ( self . _parent , part_of_path ): current_path += f '. { part_of_path } ' break current = getattr ( self . _parent , part_of_path ) else : if not hasattr ( current , part_of_path ): current_path += f '. { part_of_path } ' current = None break current = getattr ( current , part_of_path ) if current : from unittest.mock import patch , MagicMock if callable ( current ): print ( f 'self. { path }{ print_arguments ( current ) } :' ) else : print ( f 'self. { path } :' ) print () with patch ( 'sys.stdout.write' , MagicMock ()) as mock : help ( current ) for args , _ in mock . call_args_list : if args [ 0 ] == ' \\n ' : print () lines = args [ 0 ] . split ( ' \\n ' ) for line in lines [ 3 : - 1 ]: print ( f ' { line } ' ) else : print ( f 'self. { path } :' ) print () print ( f ' self { current_path } not exists.' ) print () def _help_tree ( self , level : int = 0 , parent : Optional [ dict ] = None , last_item : bool = False ) -> list [ str ]: \"\"\"Print a list of mixin with a tree style (command of Linux)\"\"\" result : list [ str ] = [] if not parent : result . append ( 'bc' ) parent = [ x for x in dir ( parent or self ) if not x . startswith ( '_' )] if last_item : starts = ' ' + ( '\u2502 ' * ( level - 1 )) else : starts = '\u2502 ' * level for key in parent : item = getattr ( self , key ) if callable ( item ): result . append ( f ' { starts } \u251c\u2500\u2500 { key }{ print_arguments ( item ) } ' ) else : result . append ( f ' { starts } \u251c\u2500\u2500 { key } ' ) last_item = parent . index ( key ) == len ( parent ) - 1 result = [ * result , * Breathecode . _help_tree ( item , level + 1 , item , last_item )] result [ - 1 ] = result [ - 1 ] . replace ( ' \u251c\u2500\u2500 ' , ' \u2514\u2500\u2500 ' ) result [ - 1 ] = result [ - 1 ] . replace ( r '\u251c\u2500\u2500 ([a-zA-Z0-9]+)$' , r '\u2514\u2500\u2500 \\1' ) for n in range ( len ( result ) - 1 , - 1 , - 1 ): if result [ n ][ 0 ] == '\u251c' : result [ n ] = re . sub ( r '^\u251c' , r '\u2514' , result [ n ]) break if level == 0 : print ( ' \\n ' . join ( result )) return result help ( self , * args ) Print a list of mixin with a tree style (command of Linux). Usage: # this print a tree with all the mixins self . bc . help () # this print just the docs of corresponding method self . bc . help ( 'bc.datetime.now' ) Source code in breathecode/tests/mixins/breathecode_mixin/breathecode.py def help ( self , * args ) -> None : \"\"\" Print a list of mixin with a tree style (command of Linux). Usage: ```py # this print a tree with all the mixins self.bc.help() # this print just the docs of corresponding method self.bc.help('bc.datetime.now') ``` \"\"\" if args : for arg in args : self . _get_doctring ( arg ) else : self . _help_tree () # prevent left a `self.bc.help()` in the code assert False","title":"bc"},{"location":"testing/mixins/bc/#bc","text":"","title":"bc"},{"location":"testing/mixins/bc/#breathecode.tests.mixins.breathecode_mixin.breathecode.Breathecode","text":"Collection of mixins for testing purposes Source code in breathecode/tests/mixins/breathecode_mixin/breathecode.py class Breathecode : \"\"\"Collection of mixins for testing purposes\"\"\" cache : Cache datetime : Datetime request : Request database : Database check : Check format : Format _parent : APITestCase fake : Faker def __init__ ( self , parent ) -> None : self . _parent = parent self . cache = Cache ( parent ) self . datetime = Datetime ( parent ) self . request = Request ( parent ) self . database = Database ( parent ) self . check = Check ( parent ) self . format = Format ( parent ) self . fake = Faker () def help ( self , * args ) -> None : \"\"\" Print a list of mixin with a tree style (command of Linux). Usage: ```py # this print a tree with all the mixins self.bc.help() # this print just the docs of corresponding method self.bc.help('bc.datetime.now') ``` \"\"\" if args : for arg in args : self . _get_doctring ( arg ) else : self . _help_tree () # prevent left a `self.bc.help()` in the code assert False def _get_doctring ( self , path : str ) -> None : parts_of_path = path . split ( '.' ) current_path = '' current = None for part_of_path in parts_of_path : if not current : if not hasattr ( self . _parent , part_of_path ): current_path += f '. { part_of_path } ' break current = getattr ( self . _parent , part_of_path ) else : if not hasattr ( current , part_of_path ): current_path += f '. { part_of_path } ' current = None break current = getattr ( current , part_of_path ) if current : from unittest.mock import patch , MagicMock if callable ( current ): print ( f 'self. { path }{ print_arguments ( current ) } :' ) else : print ( f 'self. { path } :' ) print () with patch ( 'sys.stdout.write' , MagicMock ()) as mock : help ( current ) for args , _ in mock . call_args_list : if args [ 0 ] == ' \\n ' : print () lines = args [ 0 ] . split ( ' \\n ' ) for line in lines [ 3 : - 1 ]: print ( f ' { line } ' ) else : print ( f 'self. { path } :' ) print () print ( f ' self { current_path } not exists.' ) print () def _help_tree ( self , level : int = 0 , parent : Optional [ dict ] = None , last_item : bool = False ) -> list [ str ]: \"\"\"Print a list of mixin with a tree style (command of Linux)\"\"\" result : list [ str ] = [] if not parent : result . append ( 'bc' ) parent = [ x for x in dir ( parent or self ) if not x . startswith ( '_' )] if last_item : starts = ' ' + ( '\u2502 ' * ( level - 1 )) else : starts = '\u2502 ' * level for key in parent : item = getattr ( self , key ) if callable ( item ): result . append ( f ' { starts } \u251c\u2500\u2500 { key }{ print_arguments ( item ) } ' ) else : result . append ( f ' { starts } \u251c\u2500\u2500 { key } ' ) last_item = parent . index ( key ) == len ( parent ) - 1 result = [ * result , * Breathecode . _help_tree ( item , level + 1 , item , last_item )] result [ - 1 ] = result [ - 1 ] . replace ( ' \u251c\u2500\u2500 ' , ' \u2514\u2500\u2500 ' ) result [ - 1 ] = result [ - 1 ] . replace ( r '\u251c\u2500\u2500 ([a-zA-Z0-9]+)$' , r '\u2514\u2500\u2500 \\1' ) for n in range ( len ( result ) - 1 , - 1 , - 1 ): if result [ n ][ 0 ] == '\u251c' : result [ n ] = re . sub ( r '^\u251c' , r '\u2514' , result [ n ]) break if level == 0 : print ( ' \\n ' . join ( result )) return result","title":"Breathecode"},{"location":"testing/mixins/bc/#breathecode.tests.mixins.breathecode_mixin.breathecode.Breathecode.help","text":"Print a list of mixin with a tree style (command of Linux). Usage: # this print a tree with all the mixins self . bc . help () # this print just the docs of corresponding method self . bc . help ( 'bc.datetime.now' ) Source code in breathecode/tests/mixins/breathecode_mixin/breathecode.py def help ( self , * args ) -> None : \"\"\" Print a list of mixin with a tree style (command of Linux). Usage: ```py # this print a tree with all the mixins self.bc.help() # this print just the docs of corresponding method self.bc.help('bc.datetime.now') ``` \"\"\" if args : for arg in args : self . _get_doctring ( arg ) else : self . _help_tree () # prevent left a `self.bc.help()` in the code assert False","title":"help()"},{"location":"testing/mocks/mock-requests/","text":"Mocks for requests module apply_requests_delete_mock ( endpoints = []) Apply a mock to requests.delete . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_delete_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.delete' , apply_requests_delete_mock ([ 204 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , None , ])) def test_xyz (): delete_eventbrite_descriptions_for_event ( 1 ) assert requests . delete . call_args_list == [ call ( 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_delete_mock ( endpoints = []): \"\"\" Apply a mock to `requests.delete`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_delete_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.delete', apply_requests_delete_mock([ 204, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', None, ])) def test_xyz(): delete_eventbrite_descriptions_for_event(1) assert requests.delete.call_args_list == [ call('https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'DELETE' , endpoints ) apply_requests_get_mock ( endpoints = []) Apply a mock to requests.get . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_get_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.get' , apply_requests_get_mock ([ 200 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , { 'data' : { ... } }, ])) def test_xyz (): get_eventbrite_descriptions_for_event ( 1 ) assert requests . get . call_args_list == [ call ( 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_get_mock ( endpoints = []): \"\"\" Apply a mock to `requests.get`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_get_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.get', apply_requests_get_mock([ 200, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', { 'data': { ... } }, ])) def test_xyz(): get_eventbrite_descriptions_for_event(1) assert requests.get.call_args_list == [ call('https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'GET' , endpoints ) apply_requests_head_mock ( endpoints = []) Apply a mock to requests.head . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_head_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.head' , apply_requests_head_mock ([ 200 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , None , ])) def test_xyz (): get_meta_for_eventbrite_description_for_event ( 1 ) assert requests . head . call_args_list == [ call ( 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_head_mock ( endpoints = []): \"\"\" Apply a mock to `requests.head`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_head_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.head', apply_requests_head_mock([ 200, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', None, ])) def test_xyz(): get_meta_for_eventbrite_description_for_event(1) assert requests.head.call_args_list == [ call('https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'HEAD' , endpoints ) apply_requests_mock ( method = 'get' , endpoints = []) Apply Storage Blob Mock Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_mock ( method = 'get' , endpoints = []): \"\"\"Apply Storage Blob Mock\"\"\" method = method . lower () REQUESTS_INSTANCES [ method ] = request_mock ( endpoints ) return REQUESTS_INSTANCES [ method ] apply_requests_patch_mock ( endpoints = []) Apply a mock to requests.patch . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_patch_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.patch' , apply_requests_patch_mock ([ 200 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , None , ])) def test_xyz (): patch_eventbrite_descriptions_for_event ( 1 ) assert requests . patch . call_args_list == [ call ( 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_patch_mock ( endpoints = []): \"\"\" Apply a mock to `requests.patch`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_patch_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.patch', apply_requests_patch_mock([ 200, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', None, ])) def test_xyz(): patch_eventbrite_descriptions_for_event(1) assert requests.patch.call_args_list == [ call('https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'PATCH' , endpoints ) apply_requests_post_mock ( endpoints = []) Apply a mock to requests.post . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_post_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.post' , apply_requests_post_mock ([ 201 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , { 'data' : { ... } }, ])) def test_xyz (): post_eventbrite_descriptions_for_event ( 1 ) assert requests . post . call_args_list == [ call ( 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_post_mock ( endpoints = []): \"\"\" Apply a mock to `requests.post`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_post_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.post', apply_requests_post_mock([ 201, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', { 'data': { ... } }, ])) def test_xyz(): post_eventbrite_descriptions_for_event(1) assert requests.post.call_args_list == [ call('https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'POST' , endpoints ) apply_requests_put_mock ( endpoints = []) Apply a mock to requests.put . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_put_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.put' , apply_requests_put_mock ([ 200 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , { 'data' : { ... } }, ])) def test_xyz (): put_eventbrite_descriptions_for_event ( 1 ) assert requests . put . call_args_list == [ call ( 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_put_mock ( endpoints = []): \"\"\" Apply a mock to `requests.put`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_put_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.put', apply_requests_put_mock([ 200, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', { 'data': { ... } }, ])) def test_xyz(): put_eventbrite_descriptions_for_event(1) assert requests.put.call_args_list == [ call('https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'PUT' , endpoints ) apply_requests_request_mock ( endpoints = []) Apply a mock to requests.request . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_request_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.request' , apply_requests_request_mock ([ 200 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , { 'data' : { ... } }, ])) def test_xyz (): get_eventbrite_description_for_event ( 1 ) assert requests . request . call_args_list == [ call ( 'GET' , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_request_mock ( endpoints = []): \"\"\" Apply a mock to `requests.request`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_request_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.request', apply_requests_request_mock([ 200, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', { 'data': { ... } }, ])) def test_xyz(): get_eventbrite_description_for_event(1) assert requests.request.call_args_list == [ call('GET', 'https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'REQUEST' , endpoints )","title":"Mock requests"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.__init__.apply_requests_delete_mock","text":"Apply a mock to requests.delete . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_delete_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.delete' , apply_requests_delete_mock ([ 204 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , None , ])) def test_xyz (): delete_eventbrite_descriptions_for_event ( 1 ) assert requests . delete . call_args_list == [ call ( 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_delete_mock ( endpoints = []): \"\"\" Apply a mock to `requests.delete`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_delete_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.delete', apply_requests_delete_mock([ 204, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', None, ])) def test_xyz(): delete_eventbrite_descriptions_for_event(1) assert requests.delete.call_args_list == [ call('https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'DELETE' , endpoints )","title":"apply_requests_delete_mock()"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.__init__.apply_requests_get_mock","text":"Apply a mock to requests.get . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_get_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.get' , apply_requests_get_mock ([ 200 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , { 'data' : { ... } }, ])) def test_xyz (): get_eventbrite_descriptions_for_event ( 1 ) assert requests . get . call_args_list == [ call ( 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_get_mock ( endpoints = []): \"\"\" Apply a mock to `requests.get`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_get_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.get', apply_requests_get_mock([ 200, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', { 'data': { ... } }, ])) def test_xyz(): get_eventbrite_descriptions_for_event(1) assert requests.get.call_args_list == [ call('https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'GET' , endpoints )","title":"apply_requests_get_mock()"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.__init__.apply_requests_head_mock","text":"Apply a mock to requests.head . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_head_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.head' , apply_requests_head_mock ([ 200 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , None , ])) def test_xyz (): get_meta_for_eventbrite_description_for_event ( 1 ) assert requests . head . call_args_list == [ call ( 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_head_mock ( endpoints = []): \"\"\" Apply a mock to `requests.head`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_head_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.head', apply_requests_head_mock([ 200, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', None, ])) def test_xyz(): get_meta_for_eventbrite_description_for_event(1) assert requests.head.call_args_list == [ call('https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'HEAD' , endpoints )","title":"apply_requests_head_mock()"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.__init__.apply_requests_mock","text":"Apply Storage Blob Mock Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_mock ( method = 'get' , endpoints = []): \"\"\"Apply Storage Blob Mock\"\"\" method = method . lower () REQUESTS_INSTANCES [ method ] = request_mock ( endpoints ) return REQUESTS_INSTANCES [ method ]","title":"apply_requests_mock()"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.__init__.apply_requests_patch_mock","text":"Apply a mock to requests.patch . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_patch_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.patch' , apply_requests_patch_mock ([ 200 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , None , ])) def test_xyz (): patch_eventbrite_descriptions_for_event ( 1 ) assert requests . patch . call_args_list == [ call ( 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_patch_mock ( endpoints = []): \"\"\" Apply a mock to `requests.patch`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_patch_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.patch', apply_requests_patch_mock([ 200, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', None, ])) def test_xyz(): patch_eventbrite_descriptions_for_event(1) assert requests.patch.call_args_list == [ call('https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'PATCH' , endpoints )","title":"apply_requests_patch_mock()"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.__init__.apply_requests_post_mock","text":"Apply a mock to requests.post . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_post_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.post' , apply_requests_post_mock ([ 201 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , { 'data' : { ... } }, ])) def test_xyz (): post_eventbrite_descriptions_for_event ( 1 ) assert requests . post . call_args_list == [ call ( 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_post_mock ( endpoints = []): \"\"\" Apply a mock to `requests.post`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_post_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.post', apply_requests_post_mock([ 201, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', { 'data': { ... } }, ])) def test_xyz(): post_eventbrite_descriptions_for_event(1) assert requests.post.call_args_list == [ call('https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'POST' , endpoints )","title":"apply_requests_post_mock()"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.__init__.apply_requests_put_mock","text":"Apply a mock to requests.put . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_put_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.put' , apply_requests_put_mock ([ 200 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , { 'data' : { ... } }, ])) def test_xyz (): put_eventbrite_descriptions_for_event ( 1 ) assert requests . put . call_args_list == [ call ( 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_put_mock ( endpoints = []): \"\"\" Apply a mock to `requests.put`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_put_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.put', apply_requests_put_mock([ 200, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', { 'data': { ... } }, ])) def test_xyz(): put_eventbrite_descriptions_for_event(1) assert requests.put.call_args_list == [ call('https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'PUT' , endpoints )","title":"apply_requests_put_mock()"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.__init__.apply_requests_request_mock","text":"Apply a mock to requests.request . Usage: import requests from unittest.mock import patch , call from breathecode.tests.mocks import apply_requests_request_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch ( 'requests.request' , apply_requests_request_mock ([ 200 , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , { 'data' : { ... } }, ])) def test_xyz (): get_eventbrite_description_for_event ( 1 ) assert requests . request . call_args_list == [ call ( 'GET' , 'https://www.eventbriteapi.com/v3/events/1/structured_content/' , headers = { 'Authorization' : f 'Bearer 1234567890' }, data = None ), ] Source code in breathecode/tests/mocks/requests/__init__.py def apply_requests_request_mock ( endpoints = []): \"\"\" Apply a mock to `requests.request`. Usage: ```py import requests from unittest.mock import patch, call from breathecode.tests.mocks import apply_requests_request_mock from breathecode.is_doesnt_exists import get_eventbrite_description_for_event @patch('requests.request', apply_requests_request_mock([ 200, 'https://www.eventbriteapi.com/v3/events/1/structured_content/', { 'data': { ... } }, ])) def test_xyz(): get_eventbrite_description_for_event(1) assert requests.request.call_args_list == [ call('GET', 'https://www.eventbriteapi.com/v3/events/1/structured_content/', headers={'Authorization': f'Bearer 1234567890'}, data=None), ] ``` \"\"\" return apply_requests_mock ( 'REQUEST' , endpoints )","title":"apply_requests_request_mock()"},{"location":"testing/mocks/using-mocks/","text":"Using mocks Mock object Mock objects are simulated objects that mimic the behavior of real objects in controlled ways, most often as part of a software testing initiative. A programmer typically creates a mock object to test the behavior of some other object, in much the same way that a car designer uses a crash test dummy to simulate the dynamic behavior of a human in vehicle impacts. How to apply a automatic mock The most easier way to create a mock The decorator @patch.object is the best option to implement a mock @patch . object ( object_class_or_module , 'method_or_function_to_be_mocked' , MagicMock ()) This is the code to test # utils.py from .actions import shoot_gun , kenny_s_birth , show def kenny_killer ( kenny_id : int ) -> None : # get the current kenny kenny = Kenny . objects . filter ( id = kenny_id ) . first () # see - South Park - Coon and friends if kenny : shoot_gun ( kenny ) kenny_number = kenny_s_birth () show ( kenny_number ) This is a example of use of mocks from unittest.mock import MagicMock , call , patch from rest_framework.test import APITestCase from .models import Kenny from .utils import kenny_killer import app.actions as actions # this is a wrapper that implement the kenny_s_birth static behavior to the test def kenny_s_birth_mock ( number : int ): def kenny_s_birth (): return number # the side_effect is a function that manage the behavior of the mocked function return MagicMock ( side_effect = kenny_s_birth ) class KennyTestSuite ( APITestCase ): # \ud83d\udd3d this function is automatically mocked @patch . object ( actions , 'shoot_gun' , MagicMock ()) # \ud83d\udd3d this function is manually mocked @patch . object ( actions , 'kenny_s_birth' , kenny_s_birth_mock ( 1000 )) # \ud83d\udd3d this function is automatically mocked @patch . object ( actions , 'show' , MagicMock ()) def test_kill_kenny ( self ): kenny = Kenny () kenny . save () kenny_killer ( kenny_id = 1 ) # shoot_gun() is called with a kenny instance self . assertEqual ( actions . shoot_gun . call_args_list , [ call ( kenny )]) # kenny_s_birth() is called with zero arguments self . assertEqual ( actions . kenny_s_birth . call_args_list , [ call ()]) # show is called self . assertEqual ( actions . show . call_args_list , [ call ( 1 )])","title":"Using mocks"},{"location":"testing/mocks/using-mocks/#using-mocks","text":"","title":"Using mocks"},{"location":"testing/mocks/using-mocks/#mock-object","text":"Mock objects are simulated objects that mimic the behavior of real objects in controlled ways, most often as part of a software testing initiative. A programmer typically creates a mock object to test the behavior of some other object, in much the same way that a car designer uses a crash test dummy to simulate the dynamic behavior of a human in vehicle impacts.","title":"Mock object"},{"location":"testing/mocks/using-mocks/#how-to-apply-a-automatic-mock","text":"","title":"How to apply a automatic mock"},{"location":"testing/mocks/using-mocks/#the-most-easier-way-to-create-a-mock","text":"The decorator @patch.object is the best option to implement a mock @patch . object ( object_class_or_module , 'method_or_function_to_be_mocked' , MagicMock ())","title":"The most easier way to create a mock"},{"location":"testing/mocks/using-mocks/#this-is-the-code-to-test","text":"# utils.py from .actions import shoot_gun , kenny_s_birth , show def kenny_killer ( kenny_id : int ) -> None : # get the current kenny kenny = Kenny . objects . filter ( id = kenny_id ) . first () # see - South Park - Coon and friends if kenny : shoot_gun ( kenny ) kenny_number = kenny_s_birth () show ( kenny_number )","title":"This is the code to test"},{"location":"testing/mocks/using-mocks/#this-is-a-example-of-use-of-mocks","text":"from unittest.mock import MagicMock , call , patch from rest_framework.test import APITestCase from .models import Kenny from .utils import kenny_killer import app.actions as actions # this is a wrapper that implement the kenny_s_birth static behavior to the test def kenny_s_birth_mock ( number : int ): def kenny_s_birth (): return number # the side_effect is a function that manage the behavior of the mocked function return MagicMock ( side_effect = kenny_s_birth ) class KennyTestSuite ( APITestCase ): # \ud83d\udd3d this function is automatically mocked @patch . object ( actions , 'shoot_gun' , MagicMock ()) # \ud83d\udd3d this function is manually mocked @patch . object ( actions , 'kenny_s_birth' , kenny_s_birth_mock ( 1000 )) # \ud83d\udd3d this function is automatically mocked @patch . object ( actions , 'show' , MagicMock ()) def test_kill_kenny ( self ): kenny = Kenny () kenny . save () kenny_killer ( kenny_id = 1 ) # shoot_gun() is called with a kenny instance self . assertEqual ( actions . shoot_gun . call_args_list , [ call ( kenny )]) # kenny_s_birth() is called with zero arguments self . assertEqual ( actions . kenny_s_birth . call_args_list , [ call ()]) # show is called self . assertEqual ( actions . show . call_args_list , [ call ( 1 )])","title":"This is a example of use of mocks"}]}